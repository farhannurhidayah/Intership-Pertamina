
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/binary.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Pemeriksaan
 * 
 */
export type Pemeriksaan = $Result.DefaultSelection<Prisma.$PemeriksaanPayload>
/**
 * Model KabelListrik
 * 
 */
export type KabelListrik = $Result.DefaultSelection<Prisma.$KabelListrikPayload>
/**
 * Model BateraiAccu
 * 
 */
export type BateraiAccu = $Result.DefaultSelection<Prisma.$BateraiAccuPayload>
/**
 * Model Petugas
 * 
 */
export type Petugas = $Result.DefaultSelection<Prisma.$PetugasPayload>
/**
 * Model Sopir
 * 
 */
export type Sopir = $Result.DefaultSelection<Prisma.$SopirPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Perusahaan
 * 
 */
export type Perusahaan = $Result.DefaultSelection<Prisma.$PerusahaanPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pemeriksaans
 * const pemeriksaans = await prisma.pemeriksaan.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pemeriksaans
   * const pemeriksaans = await prisma.pemeriksaan.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => $Utils.JsPromise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.pemeriksaan`: Exposes CRUD operations for the **Pemeriksaan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pemeriksaans
    * const pemeriksaans = await prisma.pemeriksaan.findMany()
    * ```
    */
  get pemeriksaan(): Prisma.PemeriksaanDelegate<ExtArgs>;

  /**
   * `prisma.kabelListrik`: Exposes CRUD operations for the **KabelListrik** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KabelListriks
    * const kabelListriks = await prisma.kabelListrik.findMany()
    * ```
    */
  get kabelListrik(): Prisma.KabelListrikDelegate<ExtArgs>;

  /**
   * `prisma.bateraiAccu`: Exposes CRUD operations for the **BateraiAccu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BateraiAccus
    * const bateraiAccus = await prisma.bateraiAccu.findMany()
    * ```
    */
  get bateraiAccu(): Prisma.BateraiAccuDelegate<ExtArgs>;

  /**
   * `prisma.petugas`: Exposes CRUD operations for the **Petugas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Petugases
    * const petugases = await prisma.petugas.findMany()
    * ```
    */
  get petugas(): Prisma.PetugasDelegate<ExtArgs>;

  /**
   * `prisma.sopir`: Exposes CRUD operations for the **Sopir** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sopirs
    * const sopirs = await prisma.sopir.findMany()
    * ```
    */
  get sopir(): Prisma.SopirDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.perusahaan`: Exposes CRUD operations for the **Perusahaan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Perusahaans
    * const perusahaans = await prisma.perusahaan.findMany()
    * ```
    */
  get perusahaan(): Prisma.PerusahaanDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Pemeriksaan: 'Pemeriksaan',
    KabelListrik: 'KabelListrik',
    BateraiAccu: 'BateraiAccu',
    Petugas: 'Petugas',
    Sopir: 'Sopir',
    User: 'User',
    Role: 'Role',
    Perusahaan: 'Perusahaan'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "pemeriksaan" | "kabelListrik" | "bateraiAccu" | "petugas" | "sopir" | "user" | "role" | "perusahaan"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Pemeriksaan: {
        payload: Prisma.$PemeriksaanPayload<ExtArgs>
        fields: Prisma.PemeriksaanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PemeriksaanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PemeriksaanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PemeriksaanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PemeriksaanPayload>
          }
          findFirst: {
            args: Prisma.PemeriksaanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PemeriksaanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PemeriksaanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PemeriksaanPayload>
          }
          findMany: {
            args: Prisma.PemeriksaanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PemeriksaanPayload>[]
          }
          create: {
            args: Prisma.PemeriksaanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PemeriksaanPayload>
          }
          createMany: {
            args: Prisma.PemeriksaanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PemeriksaanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PemeriksaanPayload>
          }
          update: {
            args: Prisma.PemeriksaanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PemeriksaanPayload>
          }
          deleteMany: {
            args: Prisma.PemeriksaanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PemeriksaanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PemeriksaanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PemeriksaanPayload>
          }
          aggregate: {
            args: Prisma.PemeriksaanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePemeriksaan>
          }
          groupBy: {
            args: Prisma.PemeriksaanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PemeriksaanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PemeriksaanCountArgs<ExtArgs>
            result: $Utils.Optional<PemeriksaanCountAggregateOutputType> | number
          }
        }
      }
      KabelListrik: {
        payload: Prisma.$KabelListrikPayload<ExtArgs>
        fields: Prisma.KabelListrikFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KabelListrikFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabelListrikPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KabelListrikFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabelListrikPayload>
          }
          findFirst: {
            args: Prisma.KabelListrikFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabelListrikPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KabelListrikFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabelListrikPayload>
          }
          findMany: {
            args: Prisma.KabelListrikFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabelListrikPayload>[]
          }
          create: {
            args: Prisma.KabelListrikCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabelListrikPayload>
          }
          createMany: {
            args: Prisma.KabelListrikCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.KabelListrikDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabelListrikPayload>
          }
          update: {
            args: Prisma.KabelListrikUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabelListrikPayload>
          }
          deleteMany: {
            args: Prisma.KabelListrikDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KabelListrikUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KabelListrikUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KabelListrikPayload>
          }
          aggregate: {
            args: Prisma.KabelListrikAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKabelListrik>
          }
          groupBy: {
            args: Prisma.KabelListrikGroupByArgs<ExtArgs>
            result: $Utils.Optional<KabelListrikGroupByOutputType>[]
          }
          count: {
            args: Prisma.KabelListrikCountArgs<ExtArgs>
            result: $Utils.Optional<KabelListrikCountAggregateOutputType> | number
          }
        }
      }
      BateraiAccu: {
        payload: Prisma.$BateraiAccuPayload<ExtArgs>
        fields: Prisma.BateraiAccuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BateraiAccuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BateraiAccuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BateraiAccuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BateraiAccuPayload>
          }
          findFirst: {
            args: Prisma.BateraiAccuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BateraiAccuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BateraiAccuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BateraiAccuPayload>
          }
          findMany: {
            args: Prisma.BateraiAccuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BateraiAccuPayload>[]
          }
          create: {
            args: Prisma.BateraiAccuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BateraiAccuPayload>
          }
          createMany: {
            args: Prisma.BateraiAccuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BateraiAccuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BateraiAccuPayload>
          }
          update: {
            args: Prisma.BateraiAccuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BateraiAccuPayload>
          }
          deleteMany: {
            args: Prisma.BateraiAccuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BateraiAccuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BateraiAccuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BateraiAccuPayload>
          }
          aggregate: {
            args: Prisma.BateraiAccuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBateraiAccu>
          }
          groupBy: {
            args: Prisma.BateraiAccuGroupByArgs<ExtArgs>
            result: $Utils.Optional<BateraiAccuGroupByOutputType>[]
          }
          count: {
            args: Prisma.BateraiAccuCountArgs<ExtArgs>
            result: $Utils.Optional<BateraiAccuCountAggregateOutputType> | number
          }
        }
      }
      Petugas: {
        payload: Prisma.$PetugasPayload<ExtArgs>
        fields: Prisma.PetugasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PetugasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetugasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PetugasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetugasPayload>
          }
          findFirst: {
            args: Prisma.PetugasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetugasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PetugasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetugasPayload>
          }
          findMany: {
            args: Prisma.PetugasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetugasPayload>[]
          }
          create: {
            args: Prisma.PetugasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetugasPayload>
          }
          createMany: {
            args: Prisma.PetugasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PetugasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetugasPayload>
          }
          update: {
            args: Prisma.PetugasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetugasPayload>
          }
          deleteMany: {
            args: Prisma.PetugasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PetugasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PetugasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetugasPayload>
          }
          aggregate: {
            args: Prisma.PetugasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePetugas>
          }
          groupBy: {
            args: Prisma.PetugasGroupByArgs<ExtArgs>
            result: $Utils.Optional<PetugasGroupByOutputType>[]
          }
          count: {
            args: Prisma.PetugasCountArgs<ExtArgs>
            result: $Utils.Optional<PetugasCountAggregateOutputType> | number
          }
        }
      }
      Sopir: {
        payload: Prisma.$SopirPayload<ExtArgs>
        fields: Prisma.SopirFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SopirFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SopirPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SopirFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SopirPayload>
          }
          findFirst: {
            args: Prisma.SopirFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SopirPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SopirFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SopirPayload>
          }
          findMany: {
            args: Prisma.SopirFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SopirPayload>[]
          }
          create: {
            args: Prisma.SopirCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SopirPayload>
          }
          createMany: {
            args: Prisma.SopirCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SopirDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SopirPayload>
          }
          update: {
            args: Prisma.SopirUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SopirPayload>
          }
          deleteMany: {
            args: Prisma.SopirDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SopirUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SopirUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SopirPayload>
          }
          aggregate: {
            args: Prisma.SopirAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSopir>
          }
          groupBy: {
            args: Prisma.SopirGroupByArgs<ExtArgs>
            result: $Utils.Optional<SopirGroupByOutputType>[]
          }
          count: {
            args: Prisma.SopirCountArgs<ExtArgs>
            result: $Utils.Optional<SopirCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Perusahaan: {
        payload: Prisma.$PerusahaanPayload<ExtArgs>
        fields: Prisma.PerusahaanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerusahaanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerusahaanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerusahaanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerusahaanPayload>
          }
          findFirst: {
            args: Prisma.PerusahaanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerusahaanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerusahaanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerusahaanPayload>
          }
          findMany: {
            args: Prisma.PerusahaanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerusahaanPayload>[]
          }
          create: {
            args: Prisma.PerusahaanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerusahaanPayload>
          }
          createMany: {
            args: Prisma.PerusahaanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PerusahaanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerusahaanPayload>
          }
          update: {
            args: Prisma.PerusahaanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerusahaanPayload>
          }
          deleteMany: {
            args: Prisma.PerusahaanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerusahaanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PerusahaanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerusahaanPayload>
          }
          aggregate: {
            args: Prisma.PerusahaanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerusahaan>
          }
          groupBy: {
            args: Prisma.PerusahaanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerusahaanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerusahaanCountArgs<ExtArgs>
            result: $Utils.Optional<PerusahaanCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type KabelListrikCountOutputType
   */

  export type KabelListrikCountOutputType = {
    pemeriksaan: number
  }

  export type KabelListrikCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pemeriksaan?: boolean | KabelListrikCountOutputTypeCountPemeriksaanArgs
  }

  // Custom InputTypes
  /**
   * KabelListrikCountOutputType without action
   */
  export type KabelListrikCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrikCountOutputType
     */
    select?: KabelListrikCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KabelListrikCountOutputType without action
   */
  export type KabelListrikCountOutputTypeCountPemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PemeriksaanWhereInput
  }


  /**
   * Count Type BateraiAccuCountOutputType
   */

  export type BateraiAccuCountOutputType = {
    pemeriksaan: number
  }

  export type BateraiAccuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pemeriksaan?: boolean | BateraiAccuCountOutputTypeCountPemeriksaanArgs
  }

  // Custom InputTypes
  /**
   * BateraiAccuCountOutputType without action
   */
  export type BateraiAccuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccuCountOutputType
     */
    select?: BateraiAccuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BateraiAccuCountOutputType without action
   */
  export type BateraiAccuCountOutputTypeCountPemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PemeriksaanWhereInput
  }


  /**
   * Count Type PetugasCountOutputType
   */

  export type PetugasCountOutputType = {
    pemeriksaan: number
  }

  export type PetugasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pemeriksaan?: boolean | PetugasCountOutputTypeCountPemeriksaanArgs
  }

  // Custom InputTypes
  /**
   * PetugasCountOutputType without action
   */
  export type PetugasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetugasCountOutputType
     */
    select?: PetugasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PetugasCountOutputType without action
   */
  export type PetugasCountOutputTypeCountPemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PemeriksaanWhereInput
  }


  /**
   * Count Type SopirCountOutputType
   */

  export type SopirCountOutputType = {
    pemeriksaan: number
  }

  export type SopirCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pemeriksaan?: boolean | SopirCountOutputTypeCountPemeriksaanArgs
  }

  // Custom InputTypes
  /**
   * SopirCountOutputType without action
   */
  export type SopirCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SopirCountOutputType
     */
    select?: SopirCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SopirCountOutputType without action
   */
  export type SopirCountOutputTypeCountPemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PemeriksaanWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type PerusahaanCountOutputType
   */

  export type PerusahaanCountOutputType = {
    users: number
    pemeriksaan: number
  }

  export type PerusahaanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | PerusahaanCountOutputTypeCountUsersArgs
    pemeriksaan?: boolean | PerusahaanCountOutputTypeCountPemeriksaanArgs
  }

  // Custom InputTypes
  /**
   * PerusahaanCountOutputType without action
   */
  export type PerusahaanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerusahaanCountOutputType
     */
    select?: PerusahaanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PerusahaanCountOutputType without action
   */
  export type PerusahaanCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * PerusahaanCountOutputType without action
   */
  export type PerusahaanCountOutputTypeCountPemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PemeriksaanWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Pemeriksaan
   */

  export type AggregatePemeriksaan = {
    _count: PemeriksaanCountAggregateOutputType | null
    _avg: PemeriksaanAvgAggregateOutputType | null
    _sum: PemeriksaanSumAggregateOutputType | null
    _min: PemeriksaanMinAggregateOutputType | null
    _max: PemeriksaanMaxAggregateOutputType | null
  }

  export type PemeriksaanAvgAggregateOutputType = {
    id_pemeriksaan: number | null
    id_perusahaan: number | null
    id_petugas: number | null
    id_sopir: number | null
    id_kabelListrik: number | null
    id_bateraiAccu: number | null
  }

  export type PemeriksaanSumAggregateOutputType = {
    id_pemeriksaan: number | null
    id_perusahaan: number | null
    id_petugas: number | null
    id_sopir: number | null
    id_kabelListrik: number | null
    id_bateraiAccu: number | null
  }

  export type PemeriksaanMinAggregateOutputType = {
    id_pemeriksaan: number | null
    id_perusahaan: number | null
    id_petugas: number | null
    id_sopir: number | null
    tanggal_pemeriksaan: string | null
    jenis_pemeriksaan: string | null
    penjelasan: string | null
    keterangan: string | null
    status: string | null
    foto: string | null
    id_kabelListrik: number | null
    id_bateraiAccu: number | null
  }

  export type PemeriksaanMaxAggregateOutputType = {
    id_pemeriksaan: number | null
    id_perusahaan: number | null
    id_petugas: number | null
    id_sopir: number | null
    tanggal_pemeriksaan: string | null
    jenis_pemeriksaan: string | null
    penjelasan: string | null
    keterangan: string | null
    status: string | null
    foto: string | null
    id_kabelListrik: number | null
    id_bateraiAccu: number | null
  }

  export type PemeriksaanCountAggregateOutputType = {
    id_pemeriksaan: number
    id_perusahaan: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: number
    jenis_pemeriksaan: number
    penjelasan: number
    keterangan: number
    status: number
    foto: number
    id_kabelListrik: number
    id_bateraiAccu: number
    _all: number
  }


  export type PemeriksaanAvgAggregateInputType = {
    id_pemeriksaan?: true
    id_perusahaan?: true
    id_petugas?: true
    id_sopir?: true
    id_kabelListrik?: true
    id_bateraiAccu?: true
  }

  export type PemeriksaanSumAggregateInputType = {
    id_pemeriksaan?: true
    id_perusahaan?: true
    id_petugas?: true
    id_sopir?: true
    id_kabelListrik?: true
    id_bateraiAccu?: true
  }

  export type PemeriksaanMinAggregateInputType = {
    id_pemeriksaan?: true
    id_perusahaan?: true
    id_petugas?: true
    id_sopir?: true
    tanggal_pemeriksaan?: true
    jenis_pemeriksaan?: true
    penjelasan?: true
    keterangan?: true
    status?: true
    foto?: true
    id_kabelListrik?: true
    id_bateraiAccu?: true
  }

  export type PemeriksaanMaxAggregateInputType = {
    id_pemeriksaan?: true
    id_perusahaan?: true
    id_petugas?: true
    id_sopir?: true
    tanggal_pemeriksaan?: true
    jenis_pemeriksaan?: true
    penjelasan?: true
    keterangan?: true
    status?: true
    foto?: true
    id_kabelListrik?: true
    id_bateraiAccu?: true
  }

  export type PemeriksaanCountAggregateInputType = {
    id_pemeriksaan?: true
    id_perusahaan?: true
    id_petugas?: true
    id_sopir?: true
    tanggal_pemeriksaan?: true
    jenis_pemeriksaan?: true
    penjelasan?: true
    keterangan?: true
    status?: true
    foto?: true
    id_kabelListrik?: true
    id_bateraiAccu?: true
    _all?: true
  }

  export type PemeriksaanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pemeriksaan to aggregate.
     */
    where?: PemeriksaanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pemeriksaans to fetch.
     */
    orderBy?: PemeriksaanOrderByWithRelationInput | PemeriksaanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PemeriksaanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pemeriksaans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pemeriksaans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pemeriksaans
    **/
    _count?: true | PemeriksaanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PemeriksaanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PemeriksaanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PemeriksaanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PemeriksaanMaxAggregateInputType
  }

  export type GetPemeriksaanAggregateType<T extends PemeriksaanAggregateArgs> = {
        [P in keyof T & keyof AggregatePemeriksaan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePemeriksaan[P]>
      : GetScalarType<T[P], AggregatePemeriksaan[P]>
  }




  export type PemeriksaanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PemeriksaanWhereInput
    orderBy?: PemeriksaanOrderByWithAggregationInput | PemeriksaanOrderByWithAggregationInput[]
    by: PemeriksaanScalarFieldEnum[] | PemeriksaanScalarFieldEnum
    having?: PemeriksaanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PemeriksaanCountAggregateInputType | true
    _avg?: PemeriksaanAvgAggregateInputType
    _sum?: PemeriksaanSumAggregateInputType
    _min?: PemeriksaanMinAggregateInputType
    _max?: PemeriksaanMaxAggregateInputType
  }

  export type PemeriksaanGroupByOutputType = {
    id_pemeriksaan: number
    id_perusahaan: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik: number | null
    id_bateraiAccu: number | null
    _count: PemeriksaanCountAggregateOutputType | null
    _avg: PemeriksaanAvgAggregateOutputType | null
    _sum: PemeriksaanSumAggregateOutputType | null
    _min: PemeriksaanMinAggregateOutputType | null
    _max: PemeriksaanMaxAggregateOutputType | null
  }

  type GetPemeriksaanGroupByPayload<T extends PemeriksaanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PemeriksaanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PemeriksaanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PemeriksaanGroupByOutputType[P]>
            : GetScalarType<T[P], PemeriksaanGroupByOutputType[P]>
        }
      >
    >


  export type PemeriksaanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_pemeriksaan?: boolean
    id_perusahaan?: boolean
    id_petugas?: boolean
    id_sopir?: boolean
    tanggal_pemeriksaan?: boolean
    jenis_pemeriksaan?: boolean
    penjelasan?: boolean
    keterangan?: boolean
    status?: boolean
    foto?: boolean
    id_kabelListrik?: boolean
    id_bateraiAccu?: boolean
    perusahaan?: boolean | PerusahaanDefaultArgs<ExtArgs>
    petugas?: boolean | PetugasDefaultArgs<ExtArgs>
    sopir?: boolean | SopirDefaultArgs<ExtArgs>
    kabelListrik?: boolean | Pemeriksaan$kabelListrikArgs<ExtArgs>
    bateraiAccu?: boolean | Pemeriksaan$bateraiAccuArgs<ExtArgs>
  }, ExtArgs["result"]["pemeriksaan"]>


  export type PemeriksaanSelectScalar = {
    id_pemeriksaan?: boolean
    id_perusahaan?: boolean
    id_petugas?: boolean
    id_sopir?: boolean
    tanggal_pemeriksaan?: boolean
    jenis_pemeriksaan?: boolean
    penjelasan?: boolean
    keterangan?: boolean
    status?: boolean
    foto?: boolean
    id_kabelListrik?: boolean
    id_bateraiAccu?: boolean
  }

  export type PemeriksaanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    perusahaan?: boolean | PerusahaanDefaultArgs<ExtArgs>
    petugas?: boolean | PetugasDefaultArgs<ExtArgs>
    sopir?: boolean | SopirDefaultArgs<ExtArgs>
    kabelListrik?: boolean | Pemeriksaan$kabelListrikArgs<ExtArgs>
    bateraiAccu?: boolean | Pemeriksaan$bateraiAccuArgs<ExtArgs>
  }

  export type $PemeriksaanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pemeriksaan"
    objects: {
      perusahaan: Prisma.$PerusahaanPayload<ExtArgs>
      petugas: Prisma.$PetugasPayload<ExtArgs>
      sopir: Prisma.$SopirPayload<ExtArgs>
      kabelListrik: Prisma.$KabelListrikPayload<ExtArgs> | null
      bateraiAccu: Prisma.$BateraiAccuPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_pemeriksaan: number
      id_perusahaan: number
      id_petugas: number
      id_sopir: number
      tanggal_pemeriksaan: string
      jenis_pemeriksaan: string
      penjelasan: string
      keterangan: string
      status: string
      foto: string
      id_kabelListrik: number | null
      id_bateraiAccu: number | null
    }, ExtArgs["result"]["pemeriksaan"]>
    composites: {}
  }

  type PemeriksaanGetPayload<S extends boolean | null | undefined | PemeriksaanDefaultArgs> = $Result.GetResult<Prisma.$PemeriksaanPayload, S>

  type PemeriksaanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PemeriksaanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PemeriksaanCountAggregateInputType | true
    }

  export interface PemeriksaanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pemeriksaan'], meta: { name: 'Pemeriksaan' } }
    /**
     * Find zero or one Pemeriksaan that matches the filter.
     * @param {PemeriksaanFindUniqueArgs} args - Arguments to find a Pemeriksaan
     * @example
     * // Get one Pemeriksaan
     * const pemeriksaan = await prisma.pemeriksaan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PemeriksaanFindUniqueArgs>(args: SelectSubset<T, PemeriksaanFindUniqueArgs<ExtArgs>>): Prisma__PemeriksaanClient<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pemeriksaan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PemeriksaanFindUniqueOrThrowArgs} args - Arguments to find a Pemeriksaan
     * @example
     * // Get one Pemeriksaan
     * const pemeriksaan = await prisma.pemeriksaan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PemeriksaanFindUniqueOrThrowArgs>(args: SelectSubset<T, PemeriksaanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PemeriksaanClient<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pemeriksaan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PemeriksaanFindFirstArgs} args - Arguments to find a Pemeriksaan
     * @example
     * // Get one Pemeriksaan
     * const pemeriksaan = await prisma.pemeriksaan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PemeriksaanFindFirstArgs>(args?: SelectSubset<T, PemeriksaanFindFirstArgs<ExtArgs>>): Prisma__PemeriksaanClient<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pemeriksaan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PemeriksaanFindFirstOrThrowArgs} args - Arguments to find a Pemeriksaan
     * @example
     * // Get one Pemeriksaan
     * const pemeriksaan = await prisma.pemeriksaan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PemeriksaanFindFirstOrThrowArgs>(args?: SelectSubset<T, PemeriksaanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PemeriksaanClient<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pemeriksaans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PemeriksaanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pemeriksaans
     * const pemeriksaans = await prisma.pemeriksaan.findMany()
     * 
     * // Get first 10 Pemeriksaans
     * const pemeriksaans = await prisma.pemeriksaan.findMany({ take: 10 })
     * 
     * // Only select the `id_pemeriksaan`
     * const pemeriksaanWithId_pemeriksaanOnly = await prisma.pemeriksaan.findMany({ select: { id_pemeriksaan: true } })
     * 
     */
    findMany<T extends PemeriksaanFindManyArgs>(args?: SelectSubset<T, PemeriksaanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pemeriksaan.
     * @param {PemeriksaanCreateArgs} args - Arguments to create a Pemeriksaan.
     * @example
     * // Create one Pemeriksaan
     * const Pemeriksaan = await prisma.pemeriksaan.create({
     *   data: {
     *     // ... data to create a Pemeriksaan
     *   }
     * })
     * 
     */
    create<T extends PemeriksaanCreateArgs>(args: SelectSubset<T, PemeriksaanCreateArgs<ExtArgs>>): Prisma__PemeriksaanClient<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pemeriksaans.
     * @param {PemeriksaanCreateManyArgs} args - Arguments to create many Pemeriksaans.
     * @example
     * // Create many Pemeriksaans
     * const pemeriksaan = await prisma.pemeriksaan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PemeriksaanCreateManyArgs>(args?: SelectSubset<T, PemeriksaanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pemeriksaan.
     * @param {PemeriksaanDeleteArgs} args - Arguments to delete one Pemeriksaan.
     * @example
     * // Delete one Pemeriksaan
     * const Pemeriksaan = await prisma.pemeriksaan.delete({
     *   where: {
     *     // ... filter to delete one Pemeriksaan
     *   }
     * })
     * 
     */
    delete<T extends PemeriksaanDeleteArgs>(args: SelectSubset<T, PemeriksaanDeleteArgs<ExtArgs>>): Prisma__PemeriksaanClient<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pemeriksaan.
     * @param {PemeriksaanUpdateArgs} args - Arguments to update one Pemeriksaan.
     * @example
     * // Update one Pemeriksaan
     * const pemeriksaan = await prisma.pemeriksaan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PemeriksaanUpdateArgs>(args: SelectSubset<T, PemeriksaanUpdateArgs<ExtArgs>>): Prisma__PemeriksaanClient<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pemeriksaans.
     * @param {PemeriksaanDeleteManyArgs} args - Arguments to filter Pemeriksaans to delete.
     * @example
     * // Delete a few Pemeriksaans
     * const { count } = await prisma.pemeriksaan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PemeriksaanDeleteManyArgs>(args?: SelectSubset<T, PemeriksaanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pemeriksaans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PemeriksaanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pemeriksaans
     * const pemeriksaan = await prisma.pemeriksaan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PemeriksaanUpdateManyArgs>(args: SelectSubset<T, PemeriksaanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pemeriksaan.
     * @param {PemeriksaanUpsertArgs} args - Arguments to update or create a Pemeriksaan.
     * @example
     * // Update or create a Pemeriksaan
     * const pemeriksaan = await prisma.pemeriksaan.upsert({
     *   create: {
     *     // ... data to create a Pemeriksaan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pemeriksaan we want to update
     *   }
     * })
     */
    upsert<T extends PemeriksaanUpsertArgs>(args: SelectSubset<T, PemeriksaanUpsertArgs<ExtArgs>>): Prisma__PemeriksaanClient<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pemeriksaans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PemeriksaanCountArgs} args - Arguments to filter Pemeriksaans to count.
     * @example
     * // Count the number of Pemeriksaans
     * const count = await prisma.pemeriksaan.count({
     *   where: {
     *     // ... the filter for the Pemeriksaans we want to count
     *   }
     * })
    **/
    count<T extends PemeriksaanCountArgs>(
      args?: Subset<T, PemeriksaanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PemeriksaanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pemeriksaan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PemeriksaanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PemeriksaanAggregateArgs>(args: Subset<T, PemeriksaanAggregateArgs>): Prisma.PrismaPromise<GetPemeriksaanAggregateType<T>>

    /**
     * Group by Pemeriksaan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PemeriksaanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PemeriksaanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PemeriksaanGroupByArgs['orderBy'] }
        : { orderBy?: PemeriksaanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PemeriksaanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPemeriksaanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pemeriksaan model
   */
  readonly fields: PemeriksaanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pemeriksaan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PemeriksaanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    perusahaan<T extends PerusahaanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PerusahaanDefaultArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    petugas<T extends PetugasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PetugasDefaultArgs<ExtArgs>>): Prisma__PetugasClient<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sopir<T extends SopirDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SopirDefaultArgs<ExtArgs>>): Prisma__SopirClient<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    kabelListrik<T extends Pemeriksaan$kabelListrikArgs<ExtArgs> = {}>(args?: Subset<T, Pemeriksaan$kabelListrikArgs<ExtArgs>>): Prisma__KabelListrikClient<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    bateraiAccu<T extends Pemeriksaan$bateraiAccuArgs<ExtArgs> = {}>(args?: Subset<T, Pemeriksaan$bateraiAccuArgs<ExtArgs>>): Prisma__BateraiAccuClient<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pemeriksaan model
   */ 
  interface PemeriksaanFieldRefs {
    readonly id_pemeriksaan: FieldRef<"Pemeriksaan", 'Int'>
    readonly id_perusahaan: FieldRef<"Pemeriksaan", 'Int'>
    readonly id_petugas: FieldRef<"Pemeriksaan", 'Int'>
    readonly id_sopir: FieldRef<"Pemeriksaan", 'Int'>
    readonly tanggal_pemeriksaan: FieldRef<"Pemeriksaan", 'String'>
    readonly jenis_pemeriksaan: FieldRef<"Pemeriksaan", 'String'>
    readonly penjelasan: FieldRef<"Pemeriksaan", 'String'>
    readonly keterangan: FieldRef<"Pemeriksaan", 'String'>
    readonly status: FieldRef<"Pemeriksaan", 'String'>
    readonly foto: FieldRef<"Pemeriksaan", 'String'>
    readonly id_kabelListrik: FieldRef<"Pemeriksaan", 'Int'>
    readonly id_bateraiAccu: FieldRef<"Pemeriksaan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Pemeriksaan findUnique
   */
  export type PemeriksaanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    /**
     * Filter, which Pemeriksaan to fetch.
     */
    where: PemeriksaanWhereUniqueInput
  }

  /**
   * Pemeriksaan findUniqueOrThrow
   */
  export type PemeriksaanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    /**
     * Filter, which Pemeriksaan to fetch.
     */
    where: PemeriksaanWhereUniqueInput
  }

  /**
   * Pemeriksaan findFirst
   */
  export type PemeriksaanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    /**
     * Filter, which Pemeriksaan to fetch.
     */
    where?: PemeriksaanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pemeriksaans to fetch.
     */
    orderBy?: PemeriksaanOrderByWithRelationInput | PemeriksaanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pemeriksaans.
     */
    cursor?: PemeriksaanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pemeriksaans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pemeriksaans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pemeriksaans.
     */
    distinct?: PemeriksaanScalarFieldEnum | PemeriksaanScalarFieldEnum[]
  }

  /**
   * Pemeriksaan findFirstOrThrow
   */
  export type PemeriksaanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    /**
     * Filter, which Pemeriksaan to fetch.
     */
    where?: PemeriksaanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pemeriksaans to fetch.
     */
    orderBy?: PemeriksaanOrderByWithRelationInput | PemeriksaanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pemeriksaans.
     */
    cursor?: PemeriksaanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pemeriksaans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pemeriksaans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pemeriksaans.
     */
    distinct?: PemeriksaanScalarFieldEnum | PemeriksaanScalarFieldEnum[]
  }

  /**
   * Pemeriksaan findMany
   */
  export type PemeriksaanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    /**
     * Filter, which Pemeriksaans to fetch.
     */
    where?: PemeriksaanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pemeriksaans to fetch.
     */
    orderBy?: PemeriksaanOrderByWithRelationInput | PemeriksaanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pemeriksaans.
     */
    cursor?: PemeriksaanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pemeriksaans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pemeriksaans.
     */
    skip?: number
    distinct?: PemeriksaanScalarFieldEnum | PemeriksaanScalarFieldEnum[]
  }

  /**
   * Pemeriksaan create
   */
  export type PemeriksaanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    /**
     * The data needed to create a Pemeriksaan.
     */
    data: XOR<PemeriksaanCreateInput, PemeriksaanUncheckedCreateInput>
  }

  /**
   * Pemeriksaan createMany
   */
  export type PemeriksaanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pemeriksaans.
     */
    data: PemeriksaanCreateManyInput | PemeriksaanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pemeriksaan update
   */
  export type PemeriksaanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    /**
     * The data needed to update a Pemeriksaan.
     */
    data: XOR<PemeriksaanUpdateInput, PemeriksaanUncheckedUpdateInput>
    /**
     * Choose, which Pemeriksaan to update.
     */
    where: PemeriksaanWhereUniqueInput
  }

  /**
   * Pemeriksaan updateMany
   */
  export type PemeriksaanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pemeriksaans.
     */
    data: XOR<PemeriksaanUpdateManyMutationInput, PemeriksaanUncheckedUpdateManyInput>
    /**
     * Filter which Pemeriksaans to update
     */
    where?: PemeriksaanWhereInput
  }

  /**
   * Pemeriksaan upsert
   */
  export type PemeriksaanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    /**
     * The filter to search for the Pemeriksaan to update in case it exists.
     */
    where: PemeriksaanWhereUniqueInput
    /**
     * In case the Pemeriksaan found by the `where` argument doesn't exist, create a new Pemeriksaan with this data.
     */
    create: XOR<PemeriksaanCreateInput, PemeriksaanUncheckedCreateInput>
    /**
     * In case the Pemeriksaan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PemeriksaanUpdateInput, PemeriksaanUncheckedUpdateInput>
  }

  /**
   * Pemeriksaan delete
   */
  export type PemeriksaanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    /**
     * Filter which Pemeriksaan to delete.
     */
    where: PemeriksaanWhereUniqueInput
  }

  /**
   * Pemeriksaan deleteMany
   */
  export type PemeriksaanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pemeriksaans to delete
     */
    where?: PemeriksaanWhereInput
  }

  /**
   * Pemeriksaan.kabelListrik
   */
  export type Pemeriksaan$kabelListrikArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    where?: KabelListrikWhereInput
  }

  /**
   * Pemeriksaan.bateraiAccu
   */
  export type Pemeriksaan$bateraiAccuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    where?: BateraiAccuWhereInput
  }

  /**
   * Pemeriksaan without action
   */
  export type PemeriksaanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
  }


  /**
   * Model KabelListrik
   */

  export type AggregateKabelListrik = {
    _count: KabelListrikCountAggregateOutputType | null
    _avg: KabelListrikAvgAggregateOutputType | null
    _sum: KabelListrikSumAggregateOutputType | null
    _min: KabelListrikMinAggregateOutputType | null
    _max: KabelListrikMaxAggregateOutputType | null
  }

  export type KabelListrikAvgAggregateOutputType = {
    id: number | null
  }

  export type KabelListrikSumAggregateOutputType = {
    id: number | null
  }

  export type KabelListrikMinAggregateOutputType = {
    id: number | null
    semua_terisolasi: boolean | null
    kondisi_konduit: boolean | null
    perlindungan_kabel: boolean | null
    alat_listrik_tambahan: boolean | null
    pemantik_dilepas: boolean | null
  }

  export type KabelListrikMaxAggregateOutputType = {
    id: number | null
    semua_terisolasi: boolean | null
    kondisi_konduit: boolean | null
    perlindungan_kabel: boolean | null
    alat_listrik_tambahan: boolean | null
    pemantik_dilepas: boolean | null
  }

  export type KabelListrikCountAggregateOutputType = {
    id: number
    semua_terisolasi: number
    kondisi_konduit: number
    perlindungan_kabel: number
    alat_listrik_tambahan: number
    pemantik_dilepas: number
    _all: number
  }


  export type KabelListrikAvgAggregateInputType = {
    id?: true
  }

  export type KabelListrikSumAggregateInputType = {
    id?: true
  }

  export type KabelListrikMinAggregateInputType = {
    id?: true
    semua_terisolasi?: true
    kondisi_konduit?: true
    perlindungan_kabel?: true
    alat_listrik_tambahan?: true
    pemantik_dilepas?: true
  }

  export type KabelListrikMaxAggregateInputType = {
    id?: true
    semua_terisolasi?: true
    kondisi_konduit?: true
    perlindungan_kabel?: true
    alat_listrik_tambahan?: true
    pemantik_dilepas?: true
  }

  export type KabelListrikCountAggregateInputType = {
    id?: true
    semua_terisolasi?: true
    kondisi_konduit?: true
    perlindungan_kabel?: true
    alat_listrik_tambahan?: true
    pemantik_dilepas?: true
    _all?: true
  }

  export type KabelListrikAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KabelListrik to aggregate.
     */
    where?: KabelListrikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KabelListriks to fetch.
     */
    orderBy?: KabelListrikOrderByWithRelationInput | KabelListrikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KabelListrikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KabelListriks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KabelListriks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KabelListriks
    **/
    _count?: true | KabelListrikCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KabelListrikAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KabelListrikSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KabelListrikMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KabelListrikMaxAggregateInputType
  }

  export type GetKabelListrikAggregateType<T extends KabelListrikAggregateArgs> = {
        [P in keyof T & keyof AggregateKabelListrik]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKabelListrik[P]>
      : GetScalarType<T[P], AggregateKabelListrik[P]>
  }




  export type KabelListrikGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KabelListrikWhereInput
    orderBy?: KabelListrikOrderByWithAggregationInput | KabelListrikOrderByWithAggregationInput[]
    by: KabelListrikScalarFieldEnum[] | KabelListrikScalarFieldEnum
    having?: KabelListrikScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KabelListrikCountAggregateInputType | true
    _avg?: KabelListrikAvgAggregateInputType
    _sum?: KabelListrikSumAggregateInputType
    _min?: KabelListrikMinAggregateInputType
    _max?: KabelListrikMaxAggregateInputType
  }

  export type KabelListrikGroupByOutputType = {
    id: number
    semua_terisolasi: boolean
    kondisi_konduit: boolean
    perlindungan_kabel: boolean
    alat_listrik_tambahan: boolean
    pemantik_dilepas: boolean
    _count: KabelListrikCountAggregateOutputType | null
    _avg: KabelListrikAvgAggregateOutputType | null
    _sum: KabelListrikSumAggregateOutputType | null
    _min: KabelListrikMinAggregateOutputType | null
    _max: KabelListrikMaxAggregateOutputType | null
  }

  type GetKabelListrikGroupByPayload<T extends KabelListrikGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KabelListrikGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KabelListrikGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KabelListrikGroupByOutputType[P]>
            : GetScalarType<T[P], KabelListrikGroupByOutputType[P]>
        }
      >
    >


  export type KabelListrikSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    semua_terisolasi?: boolean
    kondisi_konduit?: boolean
    perlindungan_kabel?: boolean
    alat_listrik_tambahan?: boolean
    pemantik_dilepas?: boolean
    pemeriksaan?: boolean | KabelListrik$pemeriksaanArgs<ExtArgs>
    _count?: boolean | KabelListrikCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kabelListrik"]>


  export type KabelListrikSelectScalar = {
    id?: boolean
    semua_terisolasi?: boolean
    kondisi_konduit?: boolean
    perlindungan_kabel?: boolean
    alat_listrik_tambahan?: boolean
    pemantik_dilepas?: boolean
  }

  export type KabelListrikInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pemeriksaan?: boolean | KabelListrik$pemeriksaanArgs<ExtArgs>
    _count?: boolean | KabelListrikCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $KabelListrikPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KabelListrik"
    objects: {
      pemeriksaan: Prisma.$PemeriksaanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      semua_terisolasi: boolean
      kondisi_konduit: boolean
      perlindungan_kabel: boolean
      alat_listrik_tambahan: boolean
      pemantik_dilepas: boolean
    }, ExtArgs["result"]["kabelListrik"]>
    composites: {}
  }

  type KabelListrikGetPayload<S extends boolean | null | undefined | KabelListrikDefaultArgs> = $Result.GetResult<Prisma.$KabelListrikPayload, S>

  type KabelListrikCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KabelListrikFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KabelListrikCountAggregateInputType | true
    }

  export interface KabelListrikDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KabelListrik'], meta: { name: 'KabelListrik' } }
    /**
     * Find zero or one KabelListrik that matches the filter.
     * @param {KabelListrikFindUniqueArgs} args - Arguments to find a KabelListrik
     * @example
     * // Get one KabelListrik
     * const kabelListrik = await prisma.kabelListrik.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KabelListrikFindUniqueArgs>(args: SelectSubset<T, KabelListrikFindUniqueArgs<ExtArgs>>): Prisma__KabelListrikClient<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KabelListrik that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KabelListrikFindUniqueOrThrowArgs} args - Arguments to find a KabelListrik
     * @example
     * // Get one KabelListrik
     * const kabelListrik = await prisma.kabelListrik.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KabelListrikFindUniqueOrThrowArgs>(args: SelectSubset<T, KabelListrikFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KabelListrikClient<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KabelListrik that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabelListrikFindFirstArgs} args - Arguments to find a KabelListrik
     * @example
     * // Get one KabelListrik
     * const kabelListrik = await prisma.kabelListrik.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KabelListrikFindFirstArgs>(args?: SelectSubset<T, KabelListrikFindFirstArgs<ExtArgs>>): Prisma__KabelListrikClient<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KabelListrik that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabelListrikFindFirstOrThrowArgs} args - Arguments to find a KabelListrik
     * @example
     * // Get one KabelListrik
     * const kabelListrik = await prisma.kabelListrik.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KabelListrikFindFirstOrThrowArgs>(args?: SelectSubset<T, KabelListrikFindFirstOrThrowArgs<ExtArgs>>): Prisma__KabelListrikClient<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KabelListriks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabelListrikFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KabelListriks
     * const kabelListriks = await prisma.kabelListrik.findMany()
     * 
     * // Get first 10 KabelListriks
     * const kabelListriks = await prisma.kabelListrik.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kabelListrikWithIdOnly = await prisma.kabelListrik.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KabelListrikFindManyArgs>(args?: SelectSubset<T, KabelListrikFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KabelListrik.
     * @param {KabelListrikCreateArgs} args - Arguments to create a KabelListrik.
     * @example
     * // Create one KabelListrik
     * const KabelListrik = await prisma.kabelListrik.create({
     *   data: {
     *     // ... data to create a KabelListrik
     *   }
     * })
     * 
     */
    create<T extends KabelListrikCreateArgs>(args: SelectSubset<T, KabelListrikCreateArgs<ExtArgs>>): Prisma__KabelListrikClient<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KabelListriks.
     * @param {KabelListrikCreateManyArgs} args - Arguments to create many KabelListriks.
     * @example
     * // Create many KabelListriks
     * const kabelListrik = await prisma.kabelListrik.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KabelListrikCreateManyArgs>(args?: SelectSubset<T, KabelListrikCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a KabelListrik.
     * @param {KabelListrikDeleteArgs} args - Arguments to delete one KabelListrik.
     * @example
     * // Delete one KabelListrik
     * const KabelListrik = await prisma.kabelListrik.delete({
     *   where: {
     *     // ... filter to delete one KabelListrik
     *   }
     * })
     * 
     */
    delete<T extends KabelListrikDeleteArgs>(args: SelectSubset<T, KabelListrikDeleteArgs<ExtArgs>>): Prisma__KabelListrikClient<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KabelListrik.
     * @param {KabelListrikUpdateArgs} args - Arguments to update one KabelListrik.
     * @example
     * // Update one KabelListrik
     * const kabelListrik = await prisma.kabelListrik.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KabelListrikUpdateArgs>(args: SelectSubset<T, KabelListrikUpdateArgs<ExtArgs>>): Prisma__KabelListrikClient<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KabelListriks.
     * @param {KabelListrikDeleteManyArgs} args - Arguments to filter KabelListriks to delete.
     * @example
     * // Delete a few KabelListriks
     * const { count } = await prisma.kabelListrik.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KabelListrikDeleteManyArgs>(args?: SelectSubset<T, KabelListrikDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KabelListriks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabelListrikUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KabelListriks
     * const kabelListrik = await prisma.kabelListrik.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KabelListrikUpdateManyArgs>(args: SelectSubset<T, KabelListrikUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KabelListrik.
     * @param {KabelListrikUpsertArgs} args - Arguments to update or create a KabelListrik.
     * @example
     * // Update or create a KabelListrik
     * const kabelListrik = await prisma.kabelListrik.upsert({
     *   create: {
     *     // ... data to create a KabelListrik
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KabelListrik we want to update
     *   }
     * })
     */
    upsert<T extends KabelListrikUpsertArgs>(args: SelectSubset<T, KabelListrikUpsertArgs<ExtArgs>>): Prisma__KabelListrikClient<$Result.GetResult<Prisma.$KabelListrikPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KabelListriks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabelListrikCountArgs} args - Arguments to filter KabelListriks to count.
     * @example
     * // Count the number of KabelListriks
     * const count = await prisma.kabelListrik.count({
     *   where: {
     *     // ... the filter for the KabelListriks we want to count
     *   }
     * })
    **/
    count<T extends KabelListrikCountArgs>(
      args?: Subset<T, KabelListrikCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KabelListrikCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KabelListrik.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabelListrikAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KabelListrikAggregateArgs>(args: Subset<T, KabelListrikAggregateArgs>): Prisma.PrismaPromise<GetKabelListrikAggregateType<T>>

    /**
     * Group by KabelListrik.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KabelListrikGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KabelListrikGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KabelListrikGroupByArgs['orderBy'] }
        : { orderBy?: KabelListrikGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KabelListrikGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKabelListrikGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KabelListrik model
   */
  readonly fields: KabelListrikFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KabelListrik.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KabelListrikClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pemeriksaan<T extends KabelListrik$pemeriksaanArgs<ExtArgs> = {}>(args?: Subset<T, KabelListrik$pemeriksaanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KabelListrik model
   */ 
  interface KabelListrikFieldRefs {
    readonly id: FieldRef<"KabelListrik", 'Int'>
    readonly semua_terisolasi: FieldRef<"KabelListrik", 'Boolean'>
    readonly kondisi_konduit: FieldRef<"KabelListrik", 'Boolean'>
    readonly perlindungan_kabel: FieldRef<"KabelListrik", 'Boolean'>
    readonly alat_listrik_tambahan: FieldRef<"KabelListrik", 'Boolean'>
    readonly pemantik_dilepas: FieldRef<"KabelListrik", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * KabelListrik findUnique
   */
  export type KabelListrikFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    /**
     * Filter, which KabelListrik to fetch.
     */
    where: KabelListrikWhereUniqueInput
  }

  /**
   * KabelListrik findUniqueOrThrow
   */
  export type KabelListrikFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    /**
     * Filter, which KabelListrik to fetch.
     */
    where: KabelListrikWhereUniqueInput
  }

  /**
   * KabelListrik findFirst
   */
  export type KabelListrikFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    /**
     * Filter, which KabelListrik to fetch.
     */
    where?: KabelListrikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KabelListriks to fetch.
     */
    orderBy?: KabelListrikOrderByWithRelationInput | KabelListrikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KabelListriks.
     */
    cursor?: KabelListrikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KabelListriks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KabelListriks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KabelListriks.
     */
    distinct?: KabelListrikScalarFieldEnum | KabelListrikScalarFieldEnum[]
  }

  /**
   * KabelListrik findFirstOrThrow
   */
  export type KabelListrikFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    /**
     * Filter, which KabelListrik to fetch.
     */
    where?: KabelListrikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KabelListriks to fetch.
     */
    orderBy?: KabelListrikOrderByWithRelationInput | KabelListrikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KabelListriks.
     */
    cursor?: KabelListrikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KabelListriks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KabelListriks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KabelListriks.
     */
    distinct?: KabelListrikScalarFieldEnum | KabelListrikScalarFieldEnum[]
  }

  /**
   * KabelListrik findMany
   */
  export type KabelListrikFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    /**
     * Filter, which KabelListriks to fetch.
     */
    where?: KabelListrikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KabelListriks to fetch.
     */
    orderBy?: KabelListrikOrderByWithRelationInput | KabelListrikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KabelListriks.
     */
    cursor?: KabelListrikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KabelListriks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KabelListriks.
     */
    skip?: number
    distinct?: KabelListrikScalarFieldEnum | KabelListrikScalarFieldEnum[]
  }

  /**
   * KabelListrik create
   */
  export type KabelListrikCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    /**
     * The data needed to create a KabelListrik.
     */
    data: XOR<KabelListrikCreateInput, KabelListrikUncheckedCreateInput>
  }

  /**
   * KabelListrik createMany
   */
  export type KabelListrikCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KabelListriks.
     */
    data: KabelListrikCreateManyInput | KabelListrikCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KabelListrik update
   */
  export type KabelListrikUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    /**
     * The data needed to update a KabelListrik.
     */
    data: XOR<KabelListrikUpdateInput, KabelListrikUncheckedUpdateInput>
    /**
     * Choose, which KabelListrik to update.
     */
    where: KabelListrikWhereUniqueInput
  }

  /**
   * KabelListrik updateMany
   */
  export type KabelListrikUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KabelListriks.
     */
    data: XOR<KabelListrikUpdateManyMutationInput, KabelListrikUncheckedUpdateManyInput>
    /**
     * Filter which KabelListriks to update
     */
    where?: KabelListrikWhereInput
  }

  /**
   * KabelListrik upsert
   */
  export type KabelListrikUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    /**
     * The filter to search for the KabelListrik to update in case it exists.
     */
    where: KabelListrikWhereUniqueInput
    /**
     * In case the KabelListrik found by the `where` argument doesn't exist, create a new KabelListrik with this data.
     */
    create: XOR<KabelListrikCreateInput, KabelListrikUncheckedCreateInput>
    /**
     * In case the KabelListrik was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KabelListrikUpdateInput, KabelListrikUncheckedUpdateInput>
  }

  /**
   * KabelListrik delete
   */
  export type KabelListrikDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
    /**
     * Filter which KabelListrik to delete.
     */
    where: KabelListrikWhereUniqueInput
  }

  /**
   * KabelListrik deleteMany
   */
  export type KabelListrikDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KabelListriks to delete
     */
    where?: KabelListrikWhereInput
  }

  /**
   * KabelListrik.pemeriksaan
   */
  export type KabelListrik$pemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    where?: PemeriksaanWhereInput
    orderBy?: PemeriksaanOrderByWithRelationInput | PemeriksaanOrderByWithRelationInput[]
    cursor?: PemeriksaanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PemeriksaanScalarFieldEnum | PemeriksaanScalarFieldEnum[]
  }

  /**
   * KabelListrik without action
   */
  export type KabelListrikDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KabelListrik
     */
    select?: KabelListrikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KabelListrikInclude<ExtArgs> | null
  }


  /**
   * Model BateraiAccu
   */

  export type AggregateBateraiAccu = {
    _count: BateraiAccuCountAggregateOutputType | null
    _avg: BateraiAccuAvgAggregateOutputType | null
    _sum: BateraiAccuSumAggregateOutputType | null
    _min: BateraiAccuMinAggregateOutputType | null
    _max: BateraiAccuMaxAggregateOutputType | null
  }

  export type BateraiAccuAvgAggregateOutputType = {
    id: number | null
  }

  export type BateraiAccuSumAggregateOutputType = {
    id: number | null
  }

  export type BateraiAccuMinAggregateOutputType = {
    id: number | null
    accuBawahtanki: boolean | null
    Posisiaccu: boolean | null
    accuIsolator: boolean | null
    bukanLogam: boolean | null
  }

  export type BateraiAccuMaxAggregateOutputType = {
    id: number | null
    accuBawahtanki: boolean | null
    Posisiaccu: boolean | null
    accuIsolator: boolean | null
    bukanLogam: boolean | null
  }

  export type BateraiAccuCountAggregateOutputType = {
    id: number
    accuBawahtanki: number
    Posisiaccu: number
    accuIsolator: number
    bukanLogam: number
    _all: number
  }


  export type BateraiAccuAvgAggregateInputType = {
    id?: true
  }

  export type BateraiAccuSumAggregateInputType = {
    id?: true
  }

  export type BateraiAccuMinAggregateInputType = {
    id?: true
    accuBawahtanki?: true
    Posisiaccu?: true
    accuIsolator?: true
    bukanLogam?: true
  }

  export type BateraiAccuMaxAggregateInputType = {
    id?: true
    accuBawahtanki?: true
    Posisiaccu?: true
    accuIsolator?: true
    bukanLogam?: true
  }

  export type BateraiAccuCountAggregateInputType = {
    id?: true
    accuBawahtanki?: true
    Posisiaccu?: true
    accuIsolator?: true
    bukanLogam?: true
    _all?: true
  }

  export type BateraiAccuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BateraiAccu to aggregate.
     */
    where?: BateraiAccuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BateraiAccus to fetch.
     */
    orderBy?: BateraiAccuOrderByWithRelationInput | BateraiAccuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BateraiAccuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BateraiAccus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BateraiAccus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BateraiAccus
    **/
    _count?: true | BateraiAccuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BateraiAccuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BateraiAccuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BateraiAccuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BateraiAccuMaxAggregateInputType
  }

  export type GetBateraiAccuAggregateType<T extends BateraiAccuAggregateArgs> = {
        [P in keyof T & keyof AggregateBateraiAccu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBateraiAccu[P]>
      : GetScalarType<T[P], AggregateBateraiAccu[P]>
  }




  export type BateraiAccuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BateraiAccuWhereInput
    orderBy?: BateraiAccuOrderByWithAggregationInput | BateraiAccuOrderByWithAggregationInput[]
    by: BateraiAccuScalarFieldEnum[] | BateraiAccuScalarFieldEnum
    having?: BateraiAccuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BateraiAccuCountAggregateInputType | true
    _avg?: BateraiAccuAvgAggregateInputType
    _sum?: BateraiAccuSumAggregateInputType
    _min?: BateraiAccuMinAggregateInputType
    _max?: BateraiAccuMaxAggregateInputType
  }

  export type BateraiAccuGroupByOutputType = {
    id: number
    accuBawahtanki: boolean
    Posisiaccu: boolean
    accuIsolator: boolean
    bukanLogam: boolean
    _count: BateraiAccuCountAggregateOutputType | null
    _avg: BateraiAccuAvgAggregateOutputType | null
    _sum: BateraiAccuSumAggregateOutputType | null
    _min: BateraiAccuMinAggregateOutputType | null
    _max: BateraiAccuMaxAggregateOutputType | null
  }

  type GetBateraiAccuGroupByPayload<T extends BateraiAccuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BateraiAccuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BateraiAccuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BateraiAccuGroupByOutputType[P]>
            : GetScalarType<T[P], BateraiAccuGroupByOutputType[P]>
        }
      >
    >


  export type BateraiAccuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accuBawahtanki?: boolean
    Posisiaccu?: boolean
    accuIsolator?: boolean
    bukanLogam?: boolean
    pemeriksaan?: boolean | BateraiAccu$pemeriksaanArgs<ExtArgs>
    _count?: boolean | BateraiAccuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bateraiAccu"]>


  export type BateraiAccuSelectScalar = {
    id?: boolean
    accuBawahtanki?: boolean
    Posisiaccu?: boolean
    accuIsolator?: boolean
    bukanLogam?: boolean
  }

  export type BateraiAccuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pemeriksaan?: boolean | BateraiAccu$pemeriksaanArgs<ExtArgs>
    _count?: boolean | BateraiAccuCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BateraiAccuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BateraiAccu"
    objects: {
      pemeriksaan: Prisma.$PemeriksaanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      accuBawahtanki: boolean
      Posisiaccu: boolean
      accuIsolator: boolean
      bukanLogam: boolean
    }, ExtArgs["result"]["bateraiAccu"]>
    composites: {}
  }

  type BateraiAccuGetPayload<S extends boolean | null | undefined | BateraiAccuDefaultArgs> = $Result.GetResult<Prisma.$BateraiAccuPayload, S>

  type BateraiAccuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BateraiAccuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BateraiAccuCountAggregateInputType | true
    }

  export interface BateraiAccuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BateraiAccu'], meta: { name: 'BateraiAccu' } }
    /**
     * Find zero or one BateraiAccu that matches the filter.
     * @param {BateraiAccuFindUniqueArgs} args - Arguments to find a BateraiAccu
     * @example
     * // Get one BateraiAccu
     * const bateraiAccu = await prisma.bateraiAccu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BateraiAccuFindUniqueArgs>(args: SelectSubset<T, BateraiAccuFindUniqueArgs<ExtArgs>>): Prisma__BateraiAccuClient<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BateraiAccu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BateraiAccuFindUniqueOrThrowArgs} args - Arguments to find a BateraiAccu
     * @example
     * // Get one BateraiAccu
     * const bateraiAccu = await prisma.bateraiAccu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BateraiAccuFindUniqueOrThrowArgs>(args: SelectSubset<T, BateraiAccuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BateraiAccuClient<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BateraiAccu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateraiAccuFindFirstArgs} args - Arguments to find a BateraiAccu
     * @example
     * // Get one BateraiAccu
     * const bateraiAccu = await prisma.bateraiAccu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BateraiAccuFindFirstArgs>(args?: SelectSubset<T, BateraiAccuFindFirstArgs<ExtArgs>>): Prisma__BateraiAccuClient<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BateraiAccu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateraiAccuFindFirstOrThrowArgs} args - Arguments to find a BateraiAccu
     * @example
     * // Get one BateraiAccu
     * const bateraiAccu = await prisma.bateraiAccu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BateraiAccuFindFirstOrThrowArgs>(args?: SelectSubset<T, BateraiAccuFindFirstOrThrowArgs<ExtArgs>>): Prisma__BateraiAccuClient<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BateraiAccus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateraiAccuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BateraiAccus
     * const bateraiAccus = await prisma.bateraiAccu.findMany()
     * 
     * // Get first 10 BateraiAccus
     * const bateraiAccus = await prisma.bateraiAccu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bateraiAccuWithIdOnly = await prisma.bateraiAccu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BateraiAccuFindManyArgs>(args?: SelectSubset<T, BateraiAccuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BateraiAccu.
     * @param {BateraiAccuCreateArgs} args - Arguments to create a BateraiAccu.
     * @example
     * // Create one BateraiAccu
     * const BateraiAccu = await prisma.bateraiAccu.create({
     *   data: {
     *     // ... data to create a BateraiAccu
     *   }
     * })
     * 
     */
    create<T extends BateraiAccuCreateArgs>(args: SelectSubset<T, BateraiAccuCreateArgs<ExtArgs>>): Prisma__BateraiAccuClient<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BateraiAccus.
     * @param {BateraiAccuCreateManyArgs} args - Arguments to create many BateraiAccus.
     * @example
     * // Create many BateraiAccus
     * const bateraiAccu = await prisma.bateraiAccu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BateraiAccuCreateManyArgs>(args?: SelectSubset<T, BateraiAccuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BateraiAccu.
     * @param {BateraiAccuDeleteArgs} args - Arguments to delete one BateraiAccu.
     * @example
     * // Delete one BateraiAccu
     * const BateraiAccu = await prisma.bateraiAccu.delete({
     *   where: {
     *     // ... filter to delete one BateraiAccu
     *   }
     * })
     * 
     */
    delete<T extends BateraiAccuDeleteArgs>(args: SelectSubset<T, BateraiAccuDeleteArgs<ExtArgs>>): Prisma__BateraiAccuClient<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BateraiAccu.
     * @param {BateraiAccuUpdateArgs} args - Arguments to update one BateraiAccu.
     * @example
     * // Update one BateraiAccu
     * const bateraiAccu = await prisma.bateraiAccu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BateraiAccuUpdateArgs>(args: SelectSubset<T, BateraiAccuUpdateArgs<ExtArgs>>): Prisma__BateraiAccuClient<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BateraiAccus.
     * @param {BateraiAccuDeleteManyArgs} args - Arguments to filter BateraiAccus to delete.
     * @example
     * // Delete a few BateraiAccus
     * const { count } = await prisma.bateraiAccu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BateraiAccuDeleteManyArgs>(args?: SelectSubset<T, BateraiAccuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BateraiAccus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateraiAccuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BateraiAccus
     * const bateraiAccu = await prisma.bateraiAccu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BateraiAccuUpdateManyArgs>(args: SelectSubset<T, BateraiAccuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BateraiAccu.
     * @param {BateraiAccuUpsertArgs} args - Arguments to update or create a BateraiAccu.
     * @example
     * // Update or create a BateraiAccu
     * const bateraiAccu = await prisma.bateraiAccu.upsert({
     *   create: {
     *     // ... data to create a BateraiAccu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BateraiAccu we want to update
     *   }
     * })
     */
    upsert<T extends BateraiAccuUpsertArgs>(args: SelectSubset<T, BateraiAccuUpsertArgs<ExtArgs>>): Prisma__BateraiAccuClient<$Result.GetResult<Prisma.$BateraiAccuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BateraiAccus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateraiAccuCountArgs} args - Arguments to filter BateraiAccus to count.
     * @example
     * // Count the number of BateraiAccus
     * const count = await prisma.bateraiAccu.count({
     *   where: {
     *     // ... the filter for the BateraiAccus we want to count
     *   }
     * })
    **/
    count<T extends BateraiAccuCountArgs>(
      args?: Subset<T, BateraiAccuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BateraiAccuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BateraiAccu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateraiAccuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BateraiAccuAggregateArgs>(args: Subset<T, BateraiAccuAggregateArgs>): Prisma.PrismaPromise<GetBateraiAccuAggregateType<T>>

    /**
     * Group by BateraiAccu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateraiAccuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BateraiAccuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BateraiAccuGroupByArgs['orderBy'] }
        : { orderBy?: BateraiAccuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BateraiAccuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBateraiAccuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BateraiAccu model
   */
  readonly fields: BateraiAccuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BateraiAccu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BateraiAccuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pemeriksaan<T extends BateraiAccu$pemeriksaanArgs<ExtArgs> = {}>(args?: Subset<T, BateraiAccu$pemeriksaanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BateraiAccu model
   */ 
  interface BateraiAccuFieldRefs {
    readonly id: FieldRef<"BateraiAccu", 'Int'>
    readonly accuBawahtanki: FieldRef<"BateraiAccu", 'Boolean'>
    readonly Posisiaccu: FieldRef<"BateraiAccu", 'Boolean'>
    readonly accuIsolator: FieldRef<"BateraiAccu", 'Boolean'>
    readonly bukanLogam: FieldRef<"BateraiAccu", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * BateraiAccu findUnique
   */
  export type BateraiAccuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    /**
     * Filter, which BateraiAccu to fetch.
     */
    where: BateraiAccuWhereUniqueInput
  }

  /**
   * BateraiAccu findUniqueOrThrow
   */
  export type BateraiAccuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    /**
     * Filter, which BateraiAccu to fetch.
     */
    where: BateraiAccuWhereUniqueInput
  }

  /**
   * BateraiAccu findFirst
   */
  export type BateraiAccuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    /**
     * Filter, which BateraiAccu to fetch.
     */
    where?: BateraiAccuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BateraiAccus to fetch.
     */
    orderBy?: BateraiAccuOrderByWithRelationInput | BateraiAccuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BateraiAccus.
     */
    cursor?: BateraiAccuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BateraiAccus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BateraiAccus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BateraiAccus.
     */
    distinct?: BateraiAccuScalarFieldEnum | BateraiAccuScalarFieldEnum[]
  }

  /**
   * BateraiAccu findFirstOrThrow
   */
  export type BateraiAccuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    /**
     * Filter, which BateraiAccu to fetch.
     */
    where?: BateraiAccuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BateraiAccus to fetch.
     */
    orderBy?: BateraiAccuOrderByWithRelationInput | BateraiAccuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BateraiAccus.
     */
    cursor?: BateraiAccuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BateraiAccus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BateraiAccus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BateraiAccus.
     */
    distinct?: BateraiAccuScalarFieldEnum | BateraiAccuScalarFieldEnum[]
  }

  /**
   * BateraiAccu findMany
   */
  export type BateraiAccuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    /**
     * Filter, which BateraiAccus to fetch.
     */
    where?: BateraiAccuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BateraiAccus to fetch.
     */
    orderBy?: BateraiAccuOrderByWithRelationInput | BateraiAccuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BateraiAccus.
     */
    cursor?: BateraiAccuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BateraiAccus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BateraiAccus.
     */
    skip?: number
    distinct?: BateraiAccuScalarFieldEnum | BateraiAccuScalarFieldEnum[]
  }

  /**
   * BateraiAccu create
   */
  export type BateraiAccuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    /**
     * The data needed to create a BateraiAccu.
     */
    data: XOR<BateraiAccuCreateInput, BateraiAccuUncheckedCreateInput>
  }

  /**
   * BateraiAccu createMany
   */
  export type BateraiAccuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BateraiAccus.
     */
    data: BateraiAccuCreateManyInput | BateraiAccuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BateraiAccu update
   */
  export type BateraiAccuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    /**
     * The data needed to update a BateraiAccu.
     */
    data: XOR<BateraiAccuUpdateInput, BateraiAccuUncheckedUpdateInput>
    /**
     * Choose, which BateraiAccu to update.
     */
    where: BateraiAccuWhereUniqueInput
  }

  /**
   * BateraiAccu updateMany
   */
  export type BateraiAccuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BateraiAccus.
     */
    data: XOR<BateraiAccuUpdateManyMutationInput, BateraiAccuUncheckedUpdateManyInput>
    /**
     * Filter which BateraiAccus to update
     */
    where?: BateraiAccuWhereInput
  }

  /**
   * BateraiAccu upsert
   */
  export type BateraiAccuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    /**
     * The filter to search for the BateraiAccu to update in case it exists.
     */
    where: BateraiAccuWhereUniqueInput
    /**
     * In case the BateraiAccu found by the `where` argument doesn't exist, create a new BateraiAccu with this data.
     */
    create: XOR<BateraiAccuCreateInput, BateraiAccuUncheckedCreateInput>
    /**
     * In case the BateraiAccu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BateraiAccuUpdateInput, BateraiAccuUncheckedUpdateInput>
  }

  /**
   * BateraiAccu delete
   */
  export type BateraiAccuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
    /**
     * Filter which BateraiAccu to delete.
     */
    where: BateraiAccuWhereUniqueInput
  }

  /**
   * BateraiAccu deleteMany
   */
  export type BateraiAccuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BateraiAccus to delete
     */
    where?: BateraiAccuWhereInput
  }

  /**
   * BateraiAccu.pemeriksaan
   */
  export type BateraiAccu$pemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    where?: PemeriksaanWhereInput
    orderBy?: PemeriksaanOrderByWithRelationInput | PemeriksaanOrderByWithRelationInput[]
    cursor?: PemeriksaanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PemeriksaanScalarFieldEnum | PemeriksaanScalarFieldEnum[]
  }

  /**
   * BateraiAccu without action
   */
  export type BateraiAccuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BateraiAccu
     */
    select?: BateraiAccuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BateraiAccuInclude<ExtArgs> | null
  }


  /**
   * Model Petugas
   */

  export type AggregatePetugas = {
    _count: PetugasCountAggregateOutputType | null
    _avg: PetugasAvgAggregateOutputType | null
    _sum: PetugasSumAggregateOutputType | null
    _min: PetugasMinAggregateOutputType | null
    _max: PetugasMaxAggregateOutputType | null
  }

  export type PetugasAvgAggregateOutputType = {
    id_petugas: number | null
  }

  export type PetugasSumAggregateOutputType = {
    id_petugas: number | null
  }

  export type PetugasMinAggregateOutputType = {
    id_petugas: number | null
    nomor_petugas: string | null
    nama_petugas: string | null
  }

  export type PetugasMaxAggregateOutputType = {
    id_petugas: number | null
    nomor_petugas: string | null
    nama_petugas: string | null
  }

  export type PetugasCountAggregateOutputType = {
    id_petugas: number
    nomor_petugas: number
    nama_petugas: number
    _all: number
  }


  export type PetugasAvgAggregateInputType = {
    id_petugas?: true
  }

  export type PetugasSumAggregateInputType = {
    id_petugas?: true
  }

  export type PetugasMinAggregateInputType = {
    id_petugas?: true
    nomor_petugas?: true
    nama_petugas?: true
  }

  export type PetugasMaxAggregateInputType = {
    id_petugas?: true
    nomor_petugas?: true
    nama_petugas?: true
  }

  export type PetugasCountAggregateInputType = {
    id_petugas?: true
    nomor_petugas?: true
    nama_petugas?: true
    _all?: true
  }

  export type PetugasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Petugas to aggregate.
     */
    where?: PetugasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Petugases to fetch.
     */
    orderBy?: PetugasOrderByWithRelationInput | PetugasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PetugasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Petugases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Petugases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Petugases
    **/
    _count?: true | PetugasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PetugasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PetugasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetugasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetugasMaxAggregateInputType
  }

  export type GetPetugasAggregateType<T extends PetugasAggregateArgs> = {
        [P in keyof T & keyof AggregatePetugas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePetugas[P]>
      : GetScalarType<T[P], AggregatePetugas[P]>
  }




  export type PetugasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PetugasWhereInput
    orderBy?: PetugasOrderByWithAggregationInput | PetugasOrderByWithAggregationInput[]
    by: PetugasScalarFieldEnum[] | PetugasScalarFieldEnum
    having?: PetugasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetugasCountAggregateInputType | true
    _avg?: PetugasAvgAggregateInputType
    _sum?: PetugasSumAggregateInputType
    _min?: PetugasMinAggregateInputType
    _max?: PetugasMaxAggregateInputType
  }

  export type PetugasGroupByOutputType = {
    id_petugas: number
    nomor_petugas: string
    nama_petugas: string
    _count: PetugasCountAggregateOutputType | null
    _avg: PetugasAvgAggregateOutputType | null
    _sum: PetugasSumAggregateOutputType | null
    _min: PetugasMinAggregateOutputType | null
    _max: PetugasMaxAggregateOutputType | null
  }

  type GetPetugasGroupByPayload<T extends PetugasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PetugasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetugasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetugasGroupByOutputType[P]>
            : GetScalarType<T[P], PetugasGroupByOutputType[P]>
        }
      >
    >


  export type PetugasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_petugas?: boolean
    nomor_petugas?: boolean
    nama_petugas?: boolean
    pemeriksaan?: boolean | Petugas$pemeriksaanArgs<ExtArgs>
    _count?: boolean | PetugasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["petugas"]>


  export type PetugasSelectScalar = {
    id_petugas?: boolean
    nomor_petugas?: boolean
    nama_petugas?: boolean
  }

  export type PetugasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pemeriksaan?: boolean | Petugas$pemeriksaanArgs<ExtArgs>
    _count?: boolean | PetugasCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PetugasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Petugas"
    objects: {
      pemeriksaan: Prisma.$PemeriksaanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_petugas: number
      nomor_petugas: string
      nama_petugas: string
    }, ExtArgs["result"]["petugas"]>
    composites: {}
  }

  type PetugasGetPayload<S extends boolean | null | undefined | PetugasDefaultArgs> = $Result.GetResult<Prisma.$PetugasPayload, S>

  type PetugasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PetugasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PetugasCountAggregateInputType | true
    }

  export interface PetugasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Petugas'], meta: { name: 'Petugas' } }
    /**
     * Find zero or one Petugas that matches the filter.
     * @param {PetugasFindUniqueArgs} args - Arguments to find a Petugas
     * @example
     * // Get one Petugas
     * const petugas = await prisma.petugas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PetugasFindUniqueArgs>(args: SelectSubset<T, PetugasFindUniqueArgs<ExtArgs>>): Prisma__PetugasClient<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Petugas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PetugasFindUniqueOrThrowArgs} args - Arguments to find a Petugas
     * @example
     * // Get one Petugas
     * const petugas = await prisma.petugas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PetugasFindUniqueOrThrowArgs>(args: SelectSubset<T, PetugasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PetugasClient<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Petugas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetugasFindFirstArgs} args - Arguments to find a Petugas
     * @example
     * // Get one Petugas
     * const petugas = await prisma.petugas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PetugasFindFirstArgs>(args?: SelectSubset<T, PetugasFindFirstArgs<ExtArgs>>): Prisma__PetugasClient<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Petugas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetugasFindFirstOrThrowArgs} args - Arguments to find a Petugas
     * @example
     * // Get one Petugas
     * const petugas = await prisma.petugas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PetugasFindFirstOrThrowArgs>(args?: SelectSubset<T, PetugasFindFirstOrThrowArgs<ExtArgs>>): Prisma__PetugasClient<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Petugases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetugasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Petugases
     * const petugases = await prisma.petugas.findMany()
     * 
     * // Get first 10 Petugases
     * const petugases = await prisma.petugas.findMany({ take: 10 })
     * 
     * // Only select the `id_petugas`
     * const petugasWithId_petugasOnly = await prisma.petugas.findMany({ select: { id_petugas: true } })
     * 
     */
    findMany<T extends PetugasFindManyArgs>(args?: SelectSubset<T, PetugasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Petugas.
     * @param {PetugasCreateArgs} args - Arguments to create a Petugas.
     * @example
     * // Create one Petugas
     * const Petugas = await prisma.petugas.create({
     *   data: {
     *     // ... data to create a Petugas
     *   }
     * })
     * 
     */
    create<T extends PetugasCreateArgs>(args: SelectSubset<T, PetugasCreateArgs<ExtArgs>>): Prisma__PetugasClient<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Petugases.
     * @param {PetugasCreateManyArgs} args - Arguments to create many Petugases.
     * @example
     * // Create many Petugases
     * const petugas = await prisma.petugas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PetugasCreateManyArgs>(args?: SelectSubset<T, PetugasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Petugas.
     * @param {PetugasDeleteArgs} args - Arguments to delete one Petugas.
     * @example
     * // Delete one Petugas
     * const Petugas = await prisma.petugas.delete({
     *   where: {
     *     // ... filter to delete one Petugas
     *   }
     * })
     * 
     */
    delete<T extends PetugasDeleteArgs>(args: SelectSubset<T, PetugasDeleteArgs<ExtArgs>>): Prisma__PetugasClient<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Petugas.
     * @param {PetugasUpdateArgs} args - Arguments to update one Petugas.
     * @example
     * // Update one Petugas
     * const petugas = await prisma.petugas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PetugasUpdateArgs>(args: SelectSubset<T, PetugasUpdateArgs<ExtArgs>>): Prisma__PetugasClient<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Petugases.
     * @param {PetugasDeleteManyArgs} args - Arguments to filter Petugases to delete.
     * @example
     * // Delete a few Petugases
     * const { count } = await prisma.petugas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PetugasDeleteManyArgs>(args?: SelectSubset<T, PetugasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Petugases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetugasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Petugases
     * const petugas = await prisma.petugas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PetugasUpdateManyArgs>(args: SelectSubset<T, PetugasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Petugas.
     * @param {PetugasUpsertArgs} args - Arguments to update or create a Petugas.
     * @example
     * // Update or create a Petugas
     * const petugas = await prisma.petugas.upsert({
     *   create: {
     *     // ... data to create a Petugas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Petugas we want to update
     *   }
     * })
     */
    upsert<T extends PetugasUpsertArgs>(args: SelectSubset<T, PetugasUpsertArgs<ExtArgs>>): Prisma__PetugasClient<$Result.GetResult<Prisma.$PetugasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Petugases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetugasCountArgs} args - Arguments to filter Petugases to count.
     * @example
     * // Count the number of Petugases
     * const count = await prisma.petugas.count({
     *   where: {
     *     // ... the filter for the Petugases we want to count
     *   }
     * })
    **/
    count<T extends PetugasCountArgs>(
      args?: Subset<T, PetugasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetugasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Petugas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetugasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetugasAggregateArgs>(args: Subset<T, PetugasAggregateArgs>): Prisma.PrismaPromise<GetPetugasAggregateType<T>>

    /**
     * Group by Petugas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetugasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetugasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetugasGroupByArgs['orderBy'] }
        : { orderBy?: PetugasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetugasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetugasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Petugas model
   */
  readonly fields: PetugasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Petugas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PetugasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pemeriksaan<T extends Petugas$pemeriksaanArgs<ExtArgs> = {}>(args?: Subset<T, Petugas$pemeriksaanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Petugas model
   */ 
  interface PetugasFieldRefs {
    readonly id_petugas: FieldRef<"Petugas", 'Int'>
    readonly nomor_petugas: FieldRef<"Petugas", 'String'>
    readonly nama_petugas: FieldRef<"Petugas", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Petugas findUnique
   */
  export type PetugasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
    /**
     * Filter, which Petugas to fetch.
     */
    where: PetugasWhereUniqueInput
  }

  /**
   * Petugas findUniqueOrThrow
   */
  export type PetugasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
    /**
     * Filter, which Petugas to fetch.
     */
    where: PetugasWhereUniqueInput
  }

  /**
   * Petugas findFirst
   */
  export type PetugasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
    /**
     * Filter, which Petugas to fetch.
     */
    where?: PetugasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Petugases to fetch.
     */
    orderBy?: PetugasOrderByWithRelationInput | PetugasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Petugases.
     */
    cursor?: PetugasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Petugases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Petugases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Petugases.
     */
    distinct?: PetugasScalarFieldEnum | PetugasScalarFieldEnum[]
  }

  /**
   * Petugas findFirstOrThrow
   */
  export type PetugasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
    /**
     * Filter, which Petugas to fetch.
     */
    where?: PetugasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Petugases to fetch.
     */
    orderBy?: PetugasOrderByWithRelationInput | PetugasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Petugases.
     */
    cursor?: PetugasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Petugases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Petugases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Petugases.
     */
    distinct?: PetugasScalarFieldEnum | PetugasScalarFieldEnum[]
  }

  /**
   * Petugas findMany
   */
  export type PetugasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
    /**
     * Filter, which Petugases to fetch.
     */
    where?: PetugasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Petugases to fetch.
     */
    orderBy?: PetugasOrderByWithRelationInput | PetugasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Petugases.
     */
    cursor?: PetugasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Petugases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Petugases.
     */
    skip?: number
    distinct?: PetugasScalarFieldEnum | PetugasScalarFieldEnum[]
  }

  /**
   * Petugas create
   */
  export type PetugasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
    /**
     * The data needed to create a Petugas.
     */
    data: XOR<PetugasCreateInput, PetugasUncheckedCreateInput>
  }

  /**
   * Petugas createMany
   */
  export type PetugasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Petugases.
     */
    data: PetugasCreateManyInput | PetugasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Petugas update
   */
  export type PetugasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
    /**
     * The data needed to update a Petugas.
     */
    data: XOR<PetugasUpdateInput, PetugasUncheckedUpdateInput>
    /**
     * Choose, which Petugas to update.
     */
    where: PetugasWhereUniqueInput
  }

  /**
   * Petugas updateMany
   */
  export type PetugasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Petugases.
     */
    data: XOR<PetugasUpdateManyMutationInput, PetugasUncheckedUpdateManyInput>
    /**
     * Filter which Petugases to update
     */
    where?: PetugasWhereInput
  }

  /**
   * Petugas upsert
   */
  export type PetugasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
    /**
     * The filter to search for the Petugas to update in case it exists.
     */
    where: PetugasWhereUniqueInput
    /**
     * In case the Petugas found by the `where` argument doesn't exist, create a new Petugas with this data.
     */
    create: XOR<PetugasCreateInput, PetugasUncheckedCreateInput>
    /**
     * In case the Petugas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PetugasUpdateInput, PetugasUncheckedUpdateInput>
  }

  /**
   * Petugas delete
   */
  export type PetugasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
    /**
     * Filter which Petugas to delete.
     */
    where: PetugasWhereUniqueInput
  }

  /**
   * Petugas deleteMany
   */
  export type PetugasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Petugases to delete
     */
    where?: PetugasWhereInput
  }

  /**
   * Petugas.pemeriksaan
   */
  export type Petugas$pemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    where?: PemeriksaanWhereInput
    orderBy?: PemeriksaanOrderByWithRelationInput | PemeriksaanOrderByWithRelationInput[]
    cursor?: PemeriksaanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PemeriksaanScalarFieldEnum | PemeriksaanScalarFieldEnum[]
  }

  /**
   * Petugas without action
   */
  export type PetugasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Petugas
     */
    select?: PetugasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetugasInclude<ExtArgs> | null
  }


  /**
   * Model Sopir
   */

  export type AggregateSopir = {
    _count: SopirCountAggregateOutputType | null
    _avg: SopirAvgAggregateOutputType | null
    _sum: SopirSumAggregateOutputType | null
    _min: SopirMinAggregateOutputType | null
    _max: SopirMaxAggregateOutputType | null
  }

  export type SopirAvgAggregateOutputType = {
    id_sopir: number | null
    nomer_LO: number | null
  }

  export type SopirSumAggregateOutputType = {
    id_sopir: number | null
    nomer_LO: number | null
  }

  export type SopirMinAggregateOutputType = {
    id_sopir: number | null
    nama_sopir: string | null
    nomer_LO: number | null
  }

  export type SopirMaxAggregateOutputType = {
    id_sopir: number | null
    nama_sopir: string | null
    nomer_LO: number | null
  }

  export type SopirCountAggregateOutputType = {
    id_sopir: number
    nama_sopir: number
    nomer_LO: number
    _all: number
  }


  export type SopirAvgAggregateInputType = {
    id_sopir?: true
    nomer_LO?: true
  }

  export type SopirSumAggregateInputType = {
    id_sopir?: true
    nomer_LO?: true
  }

  export type SopirMinAggregateInputType = {
    id_sopir?: true
    nama_sopir?: true
    nomer_LO?: true
  }

  export type SopirMaxAggregateInputType = {
    id_sopir?: true
    nama_sopir?: true
    nomer_LO?: true
  }

  export type SopirCountAggregateInputType = {
    id_sopir?: true
    nama_sopir?: true
    nomer_LO?: true
    _all?: true
  }

  export type SopirAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sopir to aggregate.
     */
    where?: SopirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sopirs to fetch.
     */
    orderBy?: SopirOrderByWithRelationInput | SopirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SopirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sopirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sopirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sopirs
    **/
    _count?: true | SopirCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SopirAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SopirSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SopirMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SopirMaxAggregateInputType
  }

  export type GetSopirAggregateType<T extends SopirAggregateArgs> = {
        [P in keyof T & keyof AggregateSopir]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSopir[P]>
      : GetScalarType<T[P], AggregateSopir[P]>
  }




  export type SopirGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SopirWhereInput
    orderBy?: SopirOrderByWithAggregationInput | SopirOrderByWithAggregationInput[]
    by: SopirScalarFieldEnum[] | SopirScalarFieldEnum
    having?: SopirScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SopirCountAggregateInputType | true
    _avg?: SopirAvgAggregateInputType
    _sum?: SopirSumAggregateInputType
    _min?: SopirMinAggregateInputType
    _max?: SopirMaxAggregateInputType
  }

  export type SopirGroupByOutputType = {
    id_sopir: number
    nama_sopir: string
    nomer_LO: number
    _count: SopirCountAggregateOutputType | null
    _avg: SopirAvgAggregateOutputType | null
    _sum: SopirSumAggregateOutputType | null
    _min: SopirMinAggregateOutputType | null
    _max: SopirMaxAggregateOutputType | null
  }

  type GetSopirGroupByPayload<T extends SopirGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SopirGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SopirGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SopirGroupByOutputType[P]>
            : GetScalarType<T[P], SopirGroupByOutputType[P]>
        }
      >
    >


  export type SopirSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_sopir?: boolean
    nama_sopir?: boolean
    nomer_LO?: boolean
    pemeriksaan?: boolean | Sopir$pemeriksaanArgs<ExtArgs>
    _count?: boolean | SopirCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sopir"]>


  export type SopirSelectScalar = {
    id_sopir?: boolean
    nama_sopir?: boolean
    nomer_LO?: boolean
  }

  export type SopirInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pemeriksaan?: boolean | Sopir$pemeriksaanArgs<ExtArgs>
    _count?: boolean | SopirCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SopirPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sopir"
    objects: {
      pemeriksaan: Prisma.$PemeriksaanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_sopir: number
      nama_sopir: string
      nomer_LO: number
    }, ExtArgs["result"]["sopir"]>
    composites: {}
  }

  type SopirGetPayload<S extends boolean | null | undefined | SopirDefaultArgs> = $Result.GetResult<Prisma.$SopirPayload, S>

  type SopirCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SopirFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SopirCountAggregateInputType | true
    }

  export interface SopirDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sopir'], meta: { name: 'Sopir' } }
    /**
     * Find zero or one Sopir that matches the filter.
     * @param {SopirFindUniqueArgs} args - Arguments to find a Sopir
     * @example
     * // Get one Sopir
     * const sopir = await prisma.sopir.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SopirFindUniqueArgs>(args: SelectSubset<T, SopirFindUniqueArgs<ExtArgs>>): Prisma__SopirClient<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Sopir that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SopirFindUniqueOrThrowArgs} args - Arguments to find a Sopir
     * @example
     * // Get one Sopir
     * const sopir = await prisma.sopir.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SopirFindUniqueOrThrowArgs>(args: SelectSubset<T, SopirFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SopirClient<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Sopir that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SopirFindFirstArgs} args - Arguments to find a Sopir
     * @example
     * // Get one Sopir
     * const sopir = await prisma.sopir.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SopirFindFirstArgs>(args?: SelectSubset<T, SopirFindFirstArgs<ExtArgs>>): Prisma__SopirClient<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Sopir that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SopirFindFirstOrThrowArgs} args - Arguments to find a Sopir
     * @example
     * // Get one Sopir
     * const sopir = await prisma.sopir.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SopirFindFirstOrThrowArgs>(args?: SelectSubset<T, SopirFindFirstOrThrowArgs<ExtArgs>>): Prisma__SopirClient<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sopirs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SopirFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sopirs
     * const sopirs = await prisma.sopir.findMany()
     * 
     * // Get first 10 Sopirs
     * const sopirs = await prisma.sopir.findMany({ take: 10 })
     * 
     * // Only select the `id_sopir`
     * const sopirWithId_sopirOnly = await prisma.sopir.findMany({ select: { id_sopir: true } })
     * 
     */
    findMany<T extends SopirFindManyArgs>(args?: SelectSubset<T, SopirFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Sopir.
     * @param {SopirCreateArgs} args - Arguments to create a Sopir.
     * @example
     * // Create one Sopir
     * const Sopir = await prisma.sopir.create({
     *   data: {
     *     // ... data to create a Sopir
     *   }
     * })
     * 
     */
    create<T extends SopirCreateArgs>(args: SelectSubset<T, SopirCreateArgs<ExtArgs>>): Prisma__SopirClient<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sopirs.
     * @param {SopirCreateManyArgs} args - Arguments to create many Sopirs.
     * @example
     * // Create many Sopirs
     * const sopir = await prisma.sopir.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SopirCreateManyArgs>(args?: SelectSubset<T, SopirCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sopir.
     * @param {SopirDeleteArgs} args - Arguments to delete one Sopir.
     * @example
     * // Delete one Sopir
     * const Sopir = await prisma.sopir.delete({
     *   where: {
     *     // ... filter to delete one Sopir
     *   }
     * })
     * 
     */
    delete<T extends SopirDeleteArgs>(args: SelectSubset<T, SopirDeleteArgs<ExtArgs>>): Prisma__SopirClient<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Sopir.
     * @param {SopirUpdateArgs} args - Arguments to update one Sopir.
     * @example
     * // Update one Sopir
     * const sopir = await prisma.sopir.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SopirUpdateArgs>(args: SelectSubset<T, SopirUpdateArgs<ExtArgs>>): Prisma__SopirClient<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sopirs.
     * @param {SopirDeleteManyArgs} args - Arguments to filter Sopirs to delete.
     * @example
     * // Delete a few Sopirs
     * const { count } = await prisma.sopir.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SopirDeleteManyArgs>(args?: SelectSubset<T, SopirDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sopirs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SopirUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sopirs
     * const sopir = await prisma.sopir.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SopirUpdateManyArgs>(args: SelectSubset<T, SopirUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sopir.
     * @param {SopirUpsertArgs} args - Arguments to update or create a Sopir.
     * @example
     * // Update or create a Sopir
     * const sopir = await prisma.sopir.upsert({
     *   create: {
     *     // ... data to create a Sopir
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sopir we want to update
     *   }
     * })
     */
    upsert<T extends SopirUpsertArgs>(args: SelectSubset<T, SopirUpsertArgs<ExtArgs>>): Prisma__SopirClient<$Result.GetResult<Prisma.$SopirPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sopirs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SopirCountArgs} args - Arguments to filter Sopirs to count.
     * @example
     * // Count the number of Sopirs
     * const count = await prisma.sopir.count({
     *   where: {
     *     // ... the filter for the Sopirs we want to count
     *   }
     * })
    **/
    count<T extends SopirCountArgs>(
      args?: Subset<T, SopirCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SopirCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sopir.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SopirAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SopirAggregateArgs>(args: Subset<T, SopirAggregateArgs>): Prisma.PrismaPromise<GetSopirAggregateType<T>>

    /**
     * Group by Sopir.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SopirGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SopirGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SopirGroupByArgs['orderBy'] }
        : { orderBy?: SopirGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SopirGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSopirGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sopir model
   */
  readonly fields: SopirFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sopir.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SopirClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pemeriksaan<T extends Sopir$pemeriksaanArgs<ExtArgs> = {}>(args?: Subset<T, Sopir$pemeriksaanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sopir model
   */ 
  interface SopirFieldRefs {
    readonly id_sopir: FieldRef<"Sopir", 'Int'>
    readonly nama_sopir: FieldRef<"Sopir", 'String'>
    readonly nomer_LO: FieldRef<"Sopir", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Sopir findUnique
   */
  export type SopirFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
    /**
     * Filter, which Sopir to fetch.
     */
    where: SopirWhereUniqueInput
  }

  /**
   * Sopir findUniqueOrThrow
   */
  export type SopirFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
    /**
     * Filter, which Sopir to fetch.
     */
    where: SopirWhereUniqueInput
  }

  /**
   * Sopir findFirst
   */
  export type SopirFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
    /**
     * Filter, which Sopir to fetch.
     */
    where?: SopirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sopirs to fetch.
     */
    orderBy?: SopirOrderByWithRelationInput | SopirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sopirs.
     */
    cursor?: SopirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sopirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sopirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sopirs.
     */
    distinct?: SopirScalarFieldEnum | SopirScalarFieldEnum[]
  }

  /**
   * Sopir findFirstOrThrow
   */
  export type SopirFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
    /**
     * Filter, which Sopir to fetch.
     */
    where?: SopirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sopirs to fetch.
     */
    orderBy?: SopirOrderByWithRelationInput | SopirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sopirs.
     */
    cursor?: SopirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sopirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sopirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sopirs.
     */
    distinct?: SopirScalarFieldEnum | SopirScalarFieldEnum[]
  }

  /**
   * Sopir findMany
   */
  export type SopirFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
    /**
     * Filter, which Sopirs to fetch.
     */
    where?: SopirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sopirs to fetch.
     */
    orderBy?: SopirOrderByWithRelationInput | SopirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sopirs.
     */
    cursor?: SopirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sopirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sopirs.
     */
    skip?: number
    distinct?: SopirScalarFieldEnum | SopirScalarFieldEnum[]
  }

  /**
   * Sopir create
   */
  export type SopirCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
    /**
     * The data needed to create a Sopir.
     */
    data: XOR<SopirCreateInput, SopirUncheckedCreateInput>
  }

  /**
   * Sopir createMany
   */
  export type SopirCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sopirs.
     */
    data: SopirCreateManyInput | SopirCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sopir update
   */
  export type SopirUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
    /**
     * The data needed to update a Sopir.
     */
    data: XOR<SopirUpdateInput, SopirUncheckedUpdateInput>
    /**
     * Choose, which Sopir to update.
     */
    where: SopirWhereUniqueInput
  }

  /**
   * Sopir updateMany
   */
  export type SopirUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sopirs.
     */
    data: XOR<SopirUpdateManyMutationInput, SopirUncheckedUpdateManyInput>
    /**
     * Filter which Sopirs to update
     */
    where?: SopirWhereInput
  }

  /**
   * Sopir upsert
   */
  export type SopirUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
    /**
     * The filter to search for the Sopir to update in case it exists.
     */
    where: SopirWhereUniqueInput
    /**
     * In case the Sopir found by the `where` argument doesn't exist, create a new Sopir with this data.
     */
    create: XOR<SopirCreateInput, SopirUncheckedCreateInput>
    /**
     * In case the Sopir was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SopirUpdateInput, SopirUncheckedUpdateInput>
  }

  /**
   * Sopir delete
   */
  export type SopirDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
    /**
     * Filter which Sopir to delete.
     */
    where: SopirWhereUniqueInput
  }

  /**
   * Sopir deleteMany
   */
  export type SopirDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sopirs to delete
     */
    where?: SopirWhereInput
  }

  /**
   * Sopir.pemeriksaan
   */
  export type Sopir$pemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    where?: PemeriksaanWhereInput
    orderBy?: PemeriksaanOrderByWithRelationInput | PemeriksaanOrderByWithRelationInput[]
    cursor?: PemeriksaanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PemeriksaanScalarFieldEnum | PemeriksaanScalarFieldEnum[]
  }

  /**
   * Sopir without action
   */
  export type SopirDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sopir
     */
    select?: SopirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SopirInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    roleId: number | null
    perusahaanId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    roleId: number | null
    perusahaanId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    roleId: number | null
    perusahaanId: number | null
    nama_perusahaan: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    roleId: number | null
    perusahaanId: number | null
    nama_perusahaan: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    roleId: number
    perusahaanId: number
    nama_perusahaan: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    roleId?: true
    perusahaanId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    roleId?: true
    perusahaanId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    roleId?: true
    perusahaanId?: true
    nama_perusahaan?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    roleId?: true
    perusahaanId?: true
    nama_perusahaan?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    roleId?: true
    perusahaanId?: true
    nama_perusahaan?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    roleId: number
    perusahaanId: number | null
    nama_perusahaan: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    roleId?: boolean
    perusahaanId?: boolean
    nama_perusahaan?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    perusahaan?: boolean | User$perusahaanArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    roleId?: boolean
    perusahaanId?: boolean
    nama_perusahaan?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    perusahaan?: boolean | User$perusahaanArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      perusahaan: Prisma.$PerusahaanPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      roleId: number
      perusahaanId: number | null
      nama_perusahaan: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    perusahaan<T extends User$perusahaanArgs<ExtArgs> = {}>(args?: Subset<T, User$perusahaanArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly roleId: FieldRef<"User", 'Int'>
    readonly perusahaanId: FieldRef<"User", 'Int'>
    readonly nama_perusahaan: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.perusahaan
   */
  export type User$perusahaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    where?: PerusahaanWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    name: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>


  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly name: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Perusahaan
   */

  export type AggregatePerusahaan = {
    _count: PerusahaanCountAggregateOutputType | null
    _avg: PerusahaanAvgAggregateOutputType | null
    _sum: PerusahaanSumAggregateOutputType | null
    _min: PerusahaanMinAggregateOutputType | null
    _max: PerusahaanMaxAggregateOutputType | null
  }

  export type PerusahaanAvgAggregateOutputType = {
    id_perusahaan: number | null
  }

  export type PerusahaanSumAggregateOutputType = {
    id_perusahaan: number | null
  }

  export type PerusahaanMinAggregateOutputType = {
    id_perusahaan: number | null
    tanggal_cek_fisik: string | null
    nomor_polisi: string | null
    nama_perusahaan: string | null
  }

  export type PerusahaanMaxAggregateOutputType = {
    id_perusahaan: number | null
    tanggal_cek_fisik: string | null
    nomor_polisi: string | null
    nama_perusahaan: string | null
  }

  export type PerusahaanCountAggregateOutputType = {
    id_perusahaan: number
    tanggal_cek_fisik: number
    nomor_polisi: number
    nama_perusahaan: number
    _all: number
  }


  export type PerusahaanAvgAggregateInputType = {
    id_perusahaan?: true
  }

  export type PerusahaanSumAggregateInputType = {
    id_perusahaan?: true
  }

  export type PerusahaanMinAggregateInputType = {
    id_perusahaan?: true
    tanggal_cek_fisik?: true
    nomor_polisi?: true
    nama_perusahaan?: true
  }

  export type PerusahaanMaxAggregateInputType = {
    id_perusahaan?: true
    tanggal_cek_fisik?: true
    nomor_polisi?: true
    nama_perusahaan?: true
  }

  export type PerusahaanCountAggregateInputType = {
    id_perusahaan?: true
    tanggal_cek_fisik?: true
    nomor_polisi?: true
    nama_perusahaan?: true
    _all?: true
  }

  export type PerusahaanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Perusahaan to aggregate.
     */
    where?: PerusahaanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perusahaans to fetch.
     */
    orderBy?: PerusahaanOrderByWithRelationInput | PerusahaanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerusahaanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perusahaans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perusahaans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Perusahaans
    **/
    _count?: true | PerusahaanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerusahaanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerusahaanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerusahaanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerusahaanMaxAggregateInputType
  }

  export type GetPerusahaanAggregateType<T extends PerusahaanAggregateArgs> = {
        [P in keyof T & keyof AggregatePerusahaan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerusahaan[P]>
      : GetScalarType<T[P], AggregatePerusahaan[P]>
  }




  export type PerusahaanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerusahaanWhereInput
    orderBy?: PerusahaanOrderByWithAggregationInput | PerusahaanOrderByWithAggregationInput[]
    by: PerusahaanScalarFieldEnum[] | PerusahaanScalarFieldEnum
    having?: PerusahaanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerusahaanCountAggregateInputType | true
    _avg?: PerusahaanAvgAggregateInputType
    _sum?: PerusahaanSumAggregateInputType
    _min?: PerusahaanMinAggregateInputType
    _max?: PerusahaanMaxAggregateInputType
  }

  export type PerusahaanGroupByOutputType = {
    id_perusahaan: number
    tanggal_cek_fisik: string | null
    nomor_polisi: string | null
    nama_perusahaan: string
    _count: PerusahaanCountAggregateOutputType | null
    _avg: PerusahaanAvgAggregateOutputType | null
    _sum: PerusahaanSumAggregateOutputType | null
    _min: PerusahaanMinAggregateOutputType | null
    _max: PerusahaanMaxAggregateOutputType | null
  }

  type GetPerusahaanGroupByPayload<T extends PerusahaanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerusahaanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerusahaanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerusahaanGroupByOutputType[P]>
            : GetScalarType<T[P], PerusahaanGroupByOutputType[P]>
        }
      >
    >


  export type PerusahaanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_perusahaan?: boolean
    tanggal_cek_fisik?: boolean
    nomor_polisi?: boolean
    nama_perusahaan?: boolean
    users?: boolean | Perusahaan$usersArgs<ExtArgs>
    pemeriksaan?: boolean | Perusahaan$pemeriksaanArgs<ExtArgs>
    _count?: boolean | PerusahaanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["perusahaan"]>


  export type PerusahaanSelectScalar = {
    id_perusahaan?: boolean
    tanggal_cek_fisik?: boolean
    nomor_polisi?: boolean
    nama_perusahaan?: boolean
  }

  export type PerusahaanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Perusahaan$usersArgs<ExtArgs>
    pemeriksaan?: boolean | Perusahaan$pemeriksaanArgs<ExtArgs>
    _count?: boolean | PerusahaanCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PerusahaanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Perusahaan"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      pemeriksaan: Prisma.$PemeriksaanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_perusahaan: number
      tanggal_cek_fisik: string | null
      nomor_polisi: string | null
      nama_perusahaan: string
    }, ExtArgs["result"]["perusahaan"]>
    composites: {}
  }

  type PerusahaanGetPayload<S extends boolean | null | undefined | PerusahaanDefaultArgs> = $Result.GetResult<Prisma.$PerusahaanPayload, S>

  type PerusahaanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PerusahaanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PerusahaanCountAggregateInputType | true
    }

  export interface PerusahaanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Perusahaan'], meta: { name: 'Perusahaan' } }
    /**
     * Find zero or one Perusahaan that matches the filter.
     * @param {PerusahaanFindUniqueArgs} args - Arguments to find a Perusahaan
     * @example
     * // Get one Perusahaan
     * const perusahaan = await prisma.perusahaan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerusahaanFindUniqueArgs>(args: SelectSubset<T, PerusahaanFindUniqueArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Perusahaan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PerusahaanFindUniqueOrThrowArgs} args - Arguments to find a Perusahaan
     * @example
     * // Get one Perusahaan
     * const perusahaan = await prisma.perusahaan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerusahaanFindUniqueOrThrowArgs>(args: SelectSubset<T, PerusahaanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Perusahaan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerusahaanFindFirstArgs} args - Arguments to find a Perusahaan
     * @example
     * // Get one Perusahaan
     * const perusahaan = await prisma.perusahaan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerusahaanFindFirstArgs>(args?: SelectSubset<T, PerusahaanFindFirstArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Perusahaan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerusahaanFindFirstOrThrowArgs} args - Arguments to find a Perusahaan
     * @example
     * // Get one Perusahaan
     * const perusahaan = await prisma.perusahaan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerusahaanFindFirstOrThrowArgs>(args?: SelectSubset<T, PerusahaanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Perusahaans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerusahaanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Perusahaans
     * const perusahaans = await prisma.perusahaan.findMany()
     * 
     * // Get first 10 Perusahaans
     * const perusahaans = await prisma.perusahaan.findMany({ take: 10 })
     * 
     * // Only select the `id_perusahaan`
     * const perusahaanWithId_perusahaanOnly = await prisma.perusahaan.findMany({ select: { id_perusahaan: true } })
     * 
     */
    findMany<T extends PerusahaanFindManyArgs>(args?: SelectSubset<T, PerusahaanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Perusahaan.
     * @param {PerusahaanCreateArgs} args - Arguments to create a Perusahaan.
     * @example
     * // Create one Perusahaan
     * const Perusahaan = await prisma.perusahaan.create({
     *   data: {
     *     // ... data to create a Perusahaan
     *   }
     * })
     * 
     */
    create<T extends PerusahaanCreateArgs>(args: SelectSubset<T, PerusahaanCreateArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Perusahaans.
     * @param {PerusahaanCreateManyArgs} args - Arguments to create many Perusahaans.
     * @example
     * // Create many Perusahaans
     * const perusahaan = await prisma.perusahaan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerusahaanCreateManyArgs>(args?: SelectSubset<T, PerusahaanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Perusahaan.
     * @param {PerusahaanDeleteArgs} args - Arguments to delete one Perusahaan.
     * @example
     * // Delete one Perusahaan
     * const Perusahaan = await prisma.perusahaan.delete({
     *   where: {
     *     // ... filter to delete one Perusahaan
     *   }
     * })
     * 
     */
    delete<T extends PerusahaanDeleteArgs>(args: SelectSubset<T, PerusahaanDeleteArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Perusahaan.
     * @param {PerusahaanUpdateArgs} args - Arguments to update one Perusahaan.
     * @example
     * // Update one Perusahaan
     * const perusahaan = await prisma.perusahaan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerusahaanUpdateArgs>(args: SelectSubset<T, PerusahaanUpdateArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Perusahaans.
     * @param {PerusahaanDeleteManyArgs} args - Arguments to filter Perusahaans to delete.
     * @example
     * // Delete a few Perusahaans
     * const { count } = await prisma.perusahaan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerusahaanDeleteManyArgs>(args?: SelectSubset<T, PerusahaanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Perusahaans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerusahaanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Perusahaans
     * const perusahaan = await prisma.perusahaan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerusahaanUpdateManyArgs>(args: SelectSubset<T, PerusahaanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Perusahaan.
     * @param {PerusahaanUpsertArgs} args - Arguments to update or create a Perusahaan.
     * @example
     * // Update or create a Perusahaan
     * const perusahaan = await prisma.perusahaan.upsert({
     *   create: {
     *     // ... data to create a Perusahaan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Perusahaan we want to update
     *   }
     * })
     */
    upsert<T extends PerusahaanUpsertArgs>(args: SelectSubset<T, PerusahaanUpsertArgs<ExtArgs>>): Prisma__PerusahaanClient<$Result.GetResult<Prisma.$PerusahaanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Perusahaans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerusahaanCountArgs} args - Arguments to filter Perusahaans to count.
     * @example
     * // Count the number of Perusahaans
     * const count = await prisma.perusahaan.count({
     *   where: {
     *     // ... the filter for the Perusahaans we want to count
     *   }
     * })
    **/
    count<T extends PerusahaanCountArgs>(
      args?: Subset<T, PerusahaanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerusahaanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Perusahaan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerusahaanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerusahaanAggregateArgs>(args: Subset<T, PerusahaanAggregateArgs>): Prisma.PrismaPromise<GetPerusahaanAggregateType<T>>

    /**
     * Group by Perusahaan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerusahaanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerusahaanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerusahaanGroupByArgs['orderBy'] }
        : { orderBy?: PerusahaanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerusahaanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerusahaanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Perusahaan model
   */
  readonly fields: PerusahaanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Perusahaan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerusahaanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Perusahaan$usersArgs<ExtArgs> = {}>(args?: Subset<T, Perusahaan$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    pemeriksaan<T extends Perusahaan$pemeriksaanArgs<ExtArgs> = {}>(args?: Subset<T, Perusahaan$pemeriksaanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PemeriksaanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Perusahaan model
   */ 
  interface PerusahaanFieldRefs {
    readonly id_perusahaan: FieldRef<"Perusahaan", 'Int'>
    readonly tanggal_cek_fisik: FieldRef<"Perusahaan", 'String'>
    readonly nomor_polisi: FieldRef<"Perusahaan", 'String'>
    readonly nama_perusahaan: FieldRef<"Perusahaan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Perusahaan findUnique
   */
  export type PerusahaanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    /**
     * Filter, which Perusahaan to fetch.
     */
    where: PerusahaanWhereUniqueInput
  }

  /**
   * Perusahaan findUniqueOrThrow
   */
  export type PerusahaanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    /**
     * Filter, which Perusahaan to fetch.
     */
    where: PerusahaanWhereUniqueInput
  }

  /**
   * Perusahaan findFirst
   */
  export type PerusahaanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    /**
     * Filter, which Perusahaan to fetch.
     */
    where?: PerusahaanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perusahaans to fetch.
     */
    orderBy?: PerusahaanOrderByWithRelationInput | PerusahaanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Perusahaans.
     */
    cursor?: PerusahaanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perusahaans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perusahaans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Perusahaans.
     */
    distinct?: PerusahaanScalarFieldEnum | PerusahaanScalarFieldEnum[]
  }

  /**
   * Perusahaan findFirstOrThrow
   */
  export type PerusahaanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    /**
     * Filter, which Perusahaan to fetch.
     */
    where?: PerusahaanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perusahaans to fetch.
     */
    orderBy?: PerusahaanOrderByWithRelationInput | PerusahaanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Perusahaans.
     */
    cursor?: PerusahaanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perusahaans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perusahaans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Perusahaans.
     */
    distinct?: PerusahaanScalarFieldEnum | PerusahaanScalarFieldEnum[]
  }

  /**
   * Perusahaan findMany
   */
  export type PerusahaanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    /**
     * Filter, which Perusahaans to fetch.
     */
    where?: PerusahaanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perusahaans to fetch.
     */
    orderBy?: PerusahaanOrderByWithRelationInput | PerusahaanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Perusahaans.
     */
    cursor?: PerusahaanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perusahaans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perusahaans.
     */
    skip?: number
    distinct?: PerusahaanScalarFieldEnum | PerusahaanScalarFieldEnum[]
  }

  /**
   * Perusahaan create
   */
  export type PerusahaanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    /**
     * The data needed to create a Perusahaan.
     */
    data: XOR<PerusahaanCreateInput, PerusahaanUncheckedCreateInput>
  }

  /**
   * Perusahaan createMany
   */
  export type PerusahaanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Perusahaans.
     */
    data: PerusahaanCreateManyInput | PerusahaanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Perusahaan update
   */
  export type PerusahaanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    /**
     * The data needed to update a Perusahaan.
     */
    data: XOR<PerusahaanUpdateInput, PerusahaanUncheckedUpdateInput>
    /**
     * Choose, which Perusahaan to update.
     */
    where: PerusahaanWhereUniqueInput
  }

  /**
   * Perusahaan updateMany
   */
  export type PerusahaanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Perusahaans.
     */
    data: XOR<PerusahaanUpdateManyMutationInput, PerusahaanUncheckedUpdateManyInput>
    /**
     * Filter which Perusahaans to update
     */
    where?: PerusahaanWhereInput
  }

  /**
   * Perusahaan upsert
   */
  export type PerusahaanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    /**
     * The filter to search for the Perusahaan to update in case it exists.
     */
    where: PerusahaanWhereUniqueInput
    /**
     * In case the Perusahaan found by the `where` argument doesn't exist, create a new Perusahaan with this data.
     */
    create: XOR<PerusahaanCreateInput, PerusahaanUncheckedCreateInput>
    /**
     * In case the Perusahaan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerusahaanUpdateInput, PerusahaanUncheckedUpdateInput>
  }

  /**
   * Perusahaan delete
   */
  export type PerusahaanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
    /**
     * Filter which Perusahaan to delete.
     */
    where: PerusahaanWhereUniqueInput
  }

  /**
   * Perusahaan deleteMany
   */
  export type PerusahaanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Perusahaans to delete
     */
    where?: PerusahaanWhereInput
  }

  /**
   * Perusahaan.users
   */
  export type Perusahaan$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Perusahaan.pemeriksaan
   */
  export type Perusahaan$pemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pemeriksaan
     */
    select?: PemeriksaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PemeriksaanInclude<ExtArgs> | null
    where?: PemeriksaanWhereInput
    orderBy?: PemeriksaanOrderByWithRelationInput | PemeriksaanOrderByWithRelationInput[]
    cursor?: PemeriksaanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PemeriksaanScalarFieldEnum | PemeriksaanScalarFieldEnum[]
  }

  /**
   * Perusahaan without action
   */
  export type PerusahaanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Perusahaan
     */
    select?: PerusahaanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerusahaanInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PemeriksaanScalarFieldEnum: {
    id_pemeriksaan: 'id_pemeriksaan',
    id_perusahaan: 'id_perusahaan',
    id_petugas: 'id_petugas',
    id_sopir: 'id_sopir',
    tanggal_pemeriksaan: 'tanggal_pemeriksaan',
    jenis_pemeriksaan: 'jenis_pemeriksaan',
    penjelasan: 'penjelasan',
    keterangan: 'keterangan',
    status: 'status',
    foto: 'foto',
    id_kabelListrik: 'id_kabelListrik',
    id_bateraiAccu: 'id_bateraiAccu'
  };

  export type PemeriksaanScalarFieldEnum = (typeof PemeriksaanScalarFieldEnum)[keyof typeof PemeriksaanScalarFieldEnum]


  export const KabelListrikScalarFieldEnum: {
    id: 'id',
    semua_terisolasi: 'semua_terisolasi',
    kondisi_konduit: 'kondisi_konduit',
    perlindungan_kabel: 'perlindungan_kabel',
    alat_listrik_tambahan: 'alat_listrik_tambahan',
    pemantik_dilepas: 'pemantik_dilepas'
  };

  export type KabelListrikScalarFieldEnum = (typeof KabelListrikScalarFieldEnum)[keyof typeof KabelListrikScalarFieldEnum]


  export const BateraiAccuScalarFieldEnum: {
    id: 'id',
    accuBawahtanki: 'accuBawahtanki',
    Posisiaccu: 'Posisiaccu',
    accuIsolator: 'accuIsolator',
    bukanLogam: 'bukanLogam'
  };

  export type BateraiAccuScalarFieldEnum = (typeof BateraiAccuScalarFieldEnum)[keyof typeof BateraiAccuScalarFieldEnum]


  export const PetugasScalarFieldEnum: {
    id_petugas: 'id_petugas',
    nomor_petugas: 'nomor_petugas',
    nama_petugas: 'nama_petugas'
  };

  export type PetugasScalarFieldEnum = (typeof PetugasScalarFieldEnum)[keyof typeof PetugasScalarFieldEnum]


  export const SopirScalarFieldEnum: {
    id_sopir: 'id_sopir',
    nama_sopir: 'nama_sopir',
    nomer_LO: 'nomer_LO'
  };

  export type SopirScalarFieldEnum = (typeof SopirScalarFieldEnum)[keyof typeof SopirScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    roleId: 'roleId',
    perusahaanId: 'perusahaanId',
    nama_perusahaan: 'nama_perusahaan'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const PerusahaanScalarFieldEnum: {
    id_perusahaan: 'id_perusahaan',
    tanggal_cek_fisik: 'tanggal_cek_fisik',
    nomor_polisi: 'nomor_polisi',
    nama_perusahaan: 'nama_perusahaan'
  };

  export type PerusahaanScalarFieldEnum = (typeof PerusahaanScalarFieldEnum)[keyof typeof PerusahaanScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type PemeriksaanWhereInput = {
    AND?: PemeriksaanWhereInput | PemeriksaanWhereInput[]
    OR?: PemeriksaanWhereInput[]
    NOT?: PemeriksaanWhereInput | PemeriksaanWhereInput[]
    id_pemeriksaan?: IntFilter<"Pemeriksaan"> | number
    id_perusahaan?: IntFilter<"Pemeriksaan"> | number
    id_petugas?: IntFilter<"Pemeriksaan"> | number
    id_sopir?: IntFilter<"Pemeriksaan"> | number
    tanggal_pemeriksaan?: StringFilter<"Pemeriksaan"> | string
    jenis_pemeriksaan?: StringFilter<"Pemeriksaan"> | string
    penjelasan?: StringFilter<"Pemeriksaan"> | string
    keterangan?: StringFilter<"Pemeriksaan"> | string
    status?: StringFilter<"Pemeriksaan"> | string
    foto?: StringFilter<"Pemeriksaan"> | string
    id_kabelListrik?: IntNullableFilter<"Pemeriksaan"> | number | null
    id_bateraiAccu?: IntNullableFilter<"Pemeriksaan"> | number | null
    perusahaan?: XOR<PerusahaanRelationFilter, PerusahaanWhereInput>
    petugas?: XOR<PetugasRelationFilter, PetugasWhereInput>
    sopir?: XOR<SopirRelationFilter, SopirWhereInput>
    kabelListrik?: XOR<KabelListrikNullableRelationFilter, KabelListrikWhereInput> | null
    bateraiAccu?: XOR<BateraiAccuNullableRelationFilter, BateraiAccuWhereInput> | null
  }

  export type PemeriksaanOrderByWithRelationInput = {
    id_pemeriksaan?: SortOrder
    id_perusahaan?: SortOrder
    id_petugas?: SortOrder
    id_sopir?: SortOrder
    tanggal_pemeriksaan?: SortOrder
    jenis_pemeriksaan?: SortOrder
    penjelasan?: SortOrder
    keterangan?: SortOrder
    status?: SortOrder
    foto?: SortOrder
    id_kabelListrik?: SortOrderInput | SortOrder
    id_bateraiAccu?: SortOrderInput | SortOrder
    perusahaan?: PerusahaanOrderByWithRelationInput
    petugas?: PetugasOrderByWithRelationInput
    sopir?: SopirOrderByWithRelationInput
    kabelListrik?: KabelListrikOrderByWithRelationInput
    bateraiAccu?: BateraiAccuOrderByWithRelationInput
  }

  export type PemeriksaanWhereUniqueInput = Prisma.AtLeast<{
    id_pemeriksaan?: number
    AND?: PemeriksaanWhereInput | PemeriksaanWhereInput[]
    OR?: PemeriksaanWhereInput[]
    NOT?: PemeriksaanWhereInput | PemeriksaanWhereInput[]
    id_perusahaan?: IntFilter<"Pemeriksaan"> | number
    id_petugas?: IntFilter<"Pemeriksaan"> | number
    id_sopir?: IntFilter<"Pemeriksaan"> | number
    tanggal_pemeriksaan?: StringFilter<"Pemeriksaan"> | string
    jenis_pemeriksaan?: StringFilter<"Pemeriksaan"> | string
    penjelasan?: StringFilter<"Pemeriksaan"> | string
    keterangan?: StringFilter<"Pemeriksaan"> | string
    status?: StringFilter<"Pemeriksaan"> | string
    foto?: StringFilter<"Pemeriksaan"> | string
    id_kabelListrik?: IntNullableFilter<"Pemeriksaan"> | number | null
    id_bateraiAccu?: IntNullableFilter<"Pemeriksaan"> | number | null
    perusahaan?: XOR<PerusahaanRelationFilter, PerusahaanWhereInput>
    petugas?: XOR<PetugasRelationFilter, PetugasWhereInput>
    sopir?: XOR<SopirRelationFilter, SopirWhereInput>
    kabelListrik?: XOR<KabelListrikNullableRelationFilter, KabelListrikWhereInput> | null
    bateraiAccu?: XOR<BateraiAccuNullableRelationFilter, BateraiAccuWhereInput> | null
  }, "id_pemeriksaan">

  export type PemeriksaanOrderByWithAggregationInput = {
    id_pemeriksaan?: SortOrder
    id_perusahaan?: SortOrder
    id_petugas?: SortOrder
    id_sopir?: SortOrder
    tanggal_pemeriksaan?: SortOrder
    jenis_pemeriksaan?: SortOrder
    penjelasan?: SortOrder
    keterangan?: SortOrder
    status?: SortOrder
    foto?: SortOrder
    id_kabelListrik?: SortOrderInput | SortOrder
    id_bateraiAccu?: SortOrderInput | SortOrder
    _count?: PemeriksaanCountOrderByAggregateInput
    _avg?: PemeriksaanAvgOrderByAggregateInput
    _max?: PemeriksaanMaxOrderByAggregateInput
    _min?: PemeriksaanMinOrderByAggregateInput
    _sum?: PemeriksaanSumOrderByAggregateInput
  }

  export type PemeriksaanScalarWhereWithAggregatesInput = {
    AND?: PemeriksaanScalarWhereWithAggregatesInput | PemeriksaanScalarWhereWithAggregatesInput[]
    OR?: PemeriksaanScalarWhereWithAggregatesInput[]
    NOT?: PemeriksaanScalarWhereWithAggregatesInput | PemeriksaanScalarWhereWithAggregatesInput[]
    id_pemeriksaan?: IntWithAggregatesFilter<"Pemeriksaan"> | number
    id_perusahaan?: IntWithAggregatesFilter<"Pemeriksaan"> | number
    id_petugas?: IntWithAggregatesFilter<"Pemeriksaan"> | number
    id_sopir?: IntWithAggregatesFilter<"Pemeriksaan"> | number
    tanggal_pemeriksaan?: StringWithAggregatesFilter<"Pemeriksaan"> | string
    jenis_pemeriksaan?: StringWithAggregatesFilter<"Pemeriksaan"> | string
    penjelasan?: StringWithAggregatesFilter<"Pemeriksaan"> | string
    keterangan?: StringWithAggregatesFilter<"Pemeriksaan"> | string
    status?: StringWithAggregatesFilter<"Pemeriksaan"> | string
    foto?: StringWithAggregatesFilter<"Pemeriksaan"> | string
    id_kabelListrik?: IntNullableWithAggregatesFilter<"Pemeriksaan"> | number | null
    id_bateraiAccu?: IntNullableWithAggregatesFilter<"Pemeriksaan"> | number | null
  }

  export type KabelListrikWhereInput = {
    AND?: KabelListrikWhereInput | KabelListrikWhereInput[]
    OR?: KabelListrikWhereInput[]
    NOT?: KabelListrikWhereInput | KabelListrikWhereInput[]
    id?: IntFilter<"KabelListrik"> | number
    semua_terisolasi?: BoolFilter<"KabelListrik"> | boolean
    kondisi_konduit?: BoolFilter<"KabelListrik"> | boolean
    perlindungan_kabel?: BoolFilter<"KabelListrik"> | boolean
    alat_listrik_tambahan?: BoolFilter<"KabelListrik"> | boolean
    pemantik_dilepas?: BoolFilter<"KabelListrik"> | boolean
    pemeriksaan?: PemeriksaanListRelationFilter
  }

  export type KabelListrikOrderByWithRelationInput = {
    id?: SortOrder
    semua_terisolasi?: SortOrder
    kondisi_konduit?: SortOrder
    perlindungan_kabel?: SortOrder
    alat_listrik_tambahan?: SortOrder
    pemantik_dilepas?: SortOrder
    pemeriksaan?: PemeriksaanOrderByRelationAggregateInput
  }

  export type KabelListrikWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KabelListrikWhereInput | KabelListrikWhereInput[]
    OR?: KabelListrikWhereInput[]
    NOT?: KabelListrikWhereInput | KabelListrikWhereInput[]
    semua_terisolasi?: BoolFilter<"KabelListrik"> | boolean
    kondisi_konduit?: BoolFilter<"KabelListrik"> | boolean
    perlindungan_kabel?: BoolFilter<"KabelListrik"> | boolean
    alat_listrik_tambahan?: BoolFilter<"KabelListrik"> | boolean
    pemantik_dilepas?: BoolFilter<"KabelListrik"> | boolean
    pemeriksaan?: PemeriksaanListRelationFilter
  }, "id">

  export type KabelListrikOrderByWithAggregationInput = {
    id?: SortOrder
    semua_terisolasi?: SortOrder
    kondisi_konduit?: SortOrder
    perlindungan_kabel?: SortOrder
    alat_listrik_tambahan?: SortOrder
    pemantik_dilepas?: SortOrder
    _count?: KabelListrikCountOrderByAggregateInput
    _avg?: KabelListrikAvgOrderByAggregateInput
    _max?: KabelListrikMaxOrderByAggregateInput
    _min?: KabelListrikMinOrderByAggregateInput
    _sum?: KabelListrikSumOrderByAggregateInput
  }

  export type KabelListrikScalarWhereWithAggregatesInput = {
    AND?: KabelListrikScalarWhereWithAggregatesInput | KabelListrikScalarWhereWithAggregatesInput[]
    OR?: KabelListrikScalarWhereWithAggregatesInput[]
    NOT?: KabelListrikScalarWhereWithAggregatesInput | KabelListrikScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KabelListrik"> | number
    semua_terisolasi?: BoolWithAggregatesFilter<"KabelListrik"> | boolean
    kondisi_konduit?: BoolWithAggregatesFilter<"KabelListrik"> | boolean
    perlindungan_kabel?: BoolWithAggregatesFilter<"KabelListrik"> | boolean
    alat_listrik_tambahan?: BoolWithAggregatesFilter<"KabelListrik"> | boolean
    pemantik_dilepas?: BoolWithAggregatesFilter<"KabelListrik"> | boolean
  }

  export type BateraiAccuWhereInput = {
    AND?: BateraiAccuWhereInput | BateraiAccuWhereInput[]
    OR?: BateraiAccuWhereInput[]
    NOT?: BateraiAccuWhereInput | BateraiAccuWhereInput[]
    id?: IntFilter<"BateraiAccu"> | number
    accuBawahtanki?: BoolFilter<"BateraiAccu"> | boolean
    Posisiaccu?: BoolFilter<"BateraiAccu"> | boolean
    accuIsolator?: BoolFilter<"BateraiAccu"> | boolean
    bukanLogam?: BoolFilter<"BateraiAccu"> | boolean
    pemeriksaan?: PemeriksaanListRelationFilter
  }

  export type BateraiAccuOrderByWithRelationInput = {
    id?: SortOrder
    accuBawahtanki?: SortOrder
    Posisiaccu?: SortOrder
    accuIsolator?: SortOrder
    bukanLogam?: SortOrder
    pemeriksaan?: PemeriksaanOrderByRelationAggregateInput
  }

  export type BateraiAccuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BateraiAccuWhereInput | BateraiAccuWhereInput[]
    OR?: BateraiAccuWhereInput[]
    NOT?: BateraiAccuWhereInput | BateraiAccuWhereInput[]
    accuBawahtanki?: BoolFilter<"BateraiAccu"> | boolean
    Posisiaccu?: BoolFilter<"BateraiAccu"> | boolean
    accuIsolator?: BoolFilter<"BateraiAccu"> | boolean
    bukanLogam?: BoolFilter<"BateraiAccu"> | boolean
    pemeriksaan?: PemeriksaanListRelationFilter
  }, "id">

  export type BateraiAccuOrderByWithAggregationInput = {
    id?: SortOrder
    accuBawahtanki?: SortOrder
    Posisiaccu?: SortOrder
    accuIsolator?: SortOrder
    bukanLogam?: SortOrder
    _count?: BateraiAccuCountOrderByAggregateInput
    _avg?: BateraiAccuAvgOrderByAggregateInput
    _max?: BateraiAccuMaxOrderByAggregateInput
    _min?: BateraiAccuMinOrderByAggregateInput
    _sum?: BateraiAccuSumOrderByAggregateInput
  }

  export type BateraiAccuScalarWhereWithAggregatesInput = {
    AND?: BateraiAccuScalarWhereWithAggregatesInput | BateraiAccuScalarWhereWithAggregatesInput[]
    OR?: BateraiAccuScalarWhereWithAggregatesInput[]
    NOT?: BateraiAccuScalarWhereWithAggregatesInput | BateraiAccuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BateraiAccu"> | number
    accuBawahtanki?: BoolWithAggregatesFilter<"BateraiAccu"> | boolean
    Posisiaccu?: BoolWithAggregatesFilter<"BateraiAccu"> | boolean
    accuIsolator?: BoolWithAggregatesFilter<"BateraiAccu"> | boolean
    bukanLogam?: BoolWithAggregatesFilter<"BateraiAccu"> | boolean
  }

  export type PetugasWhereInput = {
    AND?: PetugasWhereInput | PetugasWhereInput[]
    OR?: PetugasWhereInput[]
    NOT?: PetugasWhereInput | PetugasWhereInput[]
    id_petugas?: IntFilter<"Petugas"> | number
    nomor_petugas?: StringFilter<"Petugas"> | string
    nama_petugas?: StringFilter<"Petugas"> | string
    pemeriksaan?: PemeriksaanListRelationFilter
  }

  export type PetugasOrderByWithRelationInput = {
    id_petugas?: SortOrder
    nomor_petugas?: SortOrder
    nama_petugas?: SortOrder
    pemeriksaan?: PemeriksaanOrderByRelationAggregateInput
  }

  export type PetugasWhereUniqueInput = Prisma.AtLeast<{
    id_petugas?: number
    AND?: PetugasWhereInput | PetugasWhereInput[]
    OR?: PetugasWhereInput[]
    NOT?: PetugasWhereInput | PetugasWhereInput[]
    nomor_petugas?: StringFilter<"Petugas"> | string
    nama_petugas?: StringFilter<"Petugas"> | string
    pemeriksaan?: PemeriksaanListRelationFilter
  }, "id_petugas">

  export type PetugasOrderByWithAggregationInput = {
    id_petugas?: SortOrder
    nomor_petugas?: SortOrder
    nama_petugas?: SortOrder
    _count?: PetugasCountOrderByAggregateInput
    _avg?: PetugasAvgOrderByAggregateInput
    _max?: PetugasMaxOrderByAggregateInput
    _min?: PetugasMinOrderByAggregateInput
    _sum?: PetugasSumOrderByAggregateInput
  }

  export type PetugasScalarWhereWithAggregatesInput = {
    AND?: PetugasScalarWhereWithAggregatesInput | PetugasScalarWhereWithAggregatesInput[]
    OR?: PetugasScalarWhereWithAggregatesInput[]
    NOT?: PetugasScalarWhereWithAggregatesInput | PetugasScalarWhereWithAggregatesInput[]
    id_petugas?: IntWithAggregatesFilter<"Petugas"> | number
    nomor_petugas?: StringWithAggregatesFilter<"Petugas"> | string
    nama_petugas?: StringWithAggregatesFilter<"Petugas"> | string
  }

  export type SopirWhereInput = {
    AND?: SopirWhereInput | SopirWhereInput[]
    OR?: SopirWhereInput[]
    NOT?: SopirWhereInput | SopirWhereInput[]
    id_sopir?: IntFilter<"Sopir"> | number
    nama_sopir?: StringFilter<"Sopir"> | string
    nomer_LO?: IntFilter<"Sopir"> | number
    pemeriksaan?: PemeriksaanListRelationFilter
  }

  export type SopirOrderByWithRelationInput = {
    id_sopir?: SortOrder
    nama_sopir?: SortOrder
    nomer_LO?: SortOrder
    pemeriksaan?: PemeriksaanOrderByRelationAggregateInput
  }

  export type SopirWhereUniqueInput = Prisma.AtLeast<{
    id_sopir?: number
    AND?: SopirWhereInput | SopirWhereInput[]
    OR?: SopirWhereInput[]
    NOT?: SopirWhereInput | SopirWhereInput[]
    nama_sopir?: StringFilter<"Sopir"> | string
    nomer_LO?: IntFilter<"Sopir"> | number
    pemeriksaan?: PemeriksaanListRelationFilter
  }, "id_sopir">

  export type SopirOrderByWithAggregationInput = {
    id_sopir?: SortOrder
    nama_sopir?: SortOrder
    nomer_LO?: SortOrder
    _count?: SopirCountOrderByAggregateInput
    _avg?: SopirAvgOrderByAggregateInput
    _max?: SopirMaxOrderByAggregateInput
    _min?: SopirMinOrderByAggregateInput
    _sum?: SopirSumOrderByAggregateInput
  }

  export type SopirScalarWhereWithAggregatesInput = {
    AND?: SopirScalarWhereWithAggregatesInput | SopirScalarWhereWithAggregatesInput[]
    OR?: SopirScalarWhereWithAggregatesInput[]
    NOT?: SopirScalarWhereWithAggregatesInput | SopirScalarWhereWithAggregatesInput[]
    id_sopir?: IntWithAggregatesFilter<"Sopir"> | number
    nama_sopir?: StringWithAggregatesFilter<"Sopir"> | string
    nomer_LO?: IntWithAggregatesFilter<"Sopir"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    roleId?: IntFilter<"User"> | number
    perusahaanId?: IntNullableFilter<"User"> | number | null
    nama_perusahaan?: StringFilter<"User"> | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    perusahaan?: XOR<PerusahaanNullableRelationFilter, PerusahaanWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    perusahaanId?: SortOrderInput | SortOrder
    nama_perusahaan?: SortOrder
    role?: RoleOrderByWithRelationInput
    perusahaan?: PerusahaanOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    roleId?: IntFilter<"User"> | number
    perusahaanId?: IntNullableFilter<"User"> | number | null
    nama_perusahaan?: StringFilter<"User"> | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    perusahaan?: XOR<PerusahaanNullableRelationFilter, PerusahaanWhereInput> | null
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    perusahaanId?: SortOrderInput | SortOrder
    nama_perusahaan?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    roleId?: IntWithAggregatesFilter<"User"> | number
    perusahaanId?: IntNullableWithAggregatesFilter<"User"> | number | null
    nama_perusahaan?: StringWithAggregatesFilter<"User"> | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    name?: StringFilter<"Role"> | string
    users?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    name?: StringFilter<"Role"> | string
    users?: UserListRelationFilter
  }, "id">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    name?: StringWithAggregatesFilter<"Role"> | string
  }

  export type PerusahaanWhereInput = {
    AND?: PerusahaanWhereInput | PerusahaanWhereInput[]
    OR?: PerusahaanWhereInput[]
    NOT?: PerusahaanWhereInput | PerusahaanWhereInput[]
    id_perusahaan?: IntFilter<"Perusahaan"> | number
    tanggal_cek_fisik?: StringNullableFilter<"Perusahaan"> | string | null
    nomor_polisi?: StringNullableFilter<"Perusahaan"> | string | null
    nama_perusahaan?: StringFilter<"Perusahaan"> | string
    users?: UserListRelationFilter
    pemeriksaan?: PemeriksaanListRelationFilter
  }

  export type PerusahaanOrderByWithRelationInput = {
    id_perusahaan?: SortOrder
    tanggal_cek_fisik?: SortOrderInput | SortOrder
    nomor_polisi?: SortOrderInput | SortOrder
    nama_perusahaan?: SortOrder
    users?: UserOrderByRelationAggregateInput
    pemeriksaan?: PemeriksaanOrderByRelationAggregateInput
  }

  export type PerusahaanWhereUniqueInput = Prisma.AtLeast<{
    id_perusahaan?: number
    AND?: PerusahaanWhereInput | PerusahaanWhereInput[]
    OR?: PerusahaanWhereInput[]
    NOT?: PerusahaanWhereInput | PerusahaanWhereInput[]
    tanggal_cek_fisik?: StringNullableFilter<"Perusahaan"> | string | null
    nomor_polisi?: StringNullableFilter<"Perusahaan"> | string | null
    nama_perusahaan?: StringFilter<"Perusahaan"> | string
    users?: UserListRelationFilter
    pemeriksaan?: PemeriksaanListRelationFilter
  }, "id_perusahaan">

  export type PerusahaanOrderByWithAggregationInput = {
    id_perusahaan?: SortOrder
    tanggal_cek_fisik?: SortOrderInput | SortOrder
    nomor_polisi?: SortOrderInput | SortOrder
    nama_perusahaan?: SortOrder
    _count?: PerusahaanCountOrderByAggregateInput
    _avg?: PerusahaanAvgOrderByAggregateInput
    _max?: PerusahaanMaxOrderByAggregateInput
    _min?: PerusahaanMinOrderByAggregateInput
    _sum?: PerusahaanSumOrderByAggregateInput
  }

  export type PerusahaanScalarWhereWithAggregatesInput = {
    AND?: PerusahaanScalarWhereWithAggregatesInput | PerusahaanScalarWhereWithAggregatesInput[]
    OR?: PerusahaanScalarWhereWithAggregatesInput[]
    NOT?: PerusahaanScalarWhereWithAggregatesInput | PerusahaanScalarWhereWithAggregatesInput[]
    id_perusahaan?: IntWithAggregatesFilter<"Perusahaan"> | number
    tanggal_cek_fisik?: StringNullableWithAggregatesFilter<"Perusahaan"> | string | null
    nomor_polisi?: StringNullableWithAggregatesFilter<"Perusahaan"> | string | null
    nama_perusahaan?: StringWithAggregatesFilter<"Perusahaan"> | string
  }

  export type PemeriksaanCreateInput = {
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    perusahaan: PerusahaanCreateNestedOneWithoutPemeriksaanInput
    petugas: PetugasCreateNestedOneWithoutPemeriksaanInput
    sopir: SopirCreateNestedOneWithoutPemeriksaanInput
    kabelListrik?: KabelListrikCreateNestedOneWithoutPemeriksaanInput
    bateraiAccu?: BateraiAccuCreateNestedOneWithoutPemeriksaanInput
  }

  export type PemeriksaanUncheckedCreateInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
    id_bateraiAccu?: number | null
  }

  export type PemeriksaanUpdateInput = {
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    perusahaan?: PerusahaanUpdateOneRequiredWithoutPemeriksaanNestedInput
    petugas?: PetugasUpdateOneRequiredWithoutPemeriksaanNestedInput
    sopir?: SopirUpdateOneRequiredWithoutPemeriksaanNestedInput
    kabelListrik?: KabelListrikUpdateOneWithoutPemeriksaanNestedInput
    bateraiAccu?: BateraiAccuUpdateOneWithoutPemeriksaanNestedInput
  }

  export type PemeriksaanUncheckedUpdateInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PemeriksaanCreateManyInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
    id_bateraiAccu?: number | null
  }

  export type PemeriksaanUpdateManyMutationInput = {
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type PemeriksaanUncheckedUpdateManyInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KabelListrikCreateInput = {
    semua_terisolasi: boolean
    kondisi_konduit: boolean
    perlindungan_kabel: boolean
    alat_listrik_tambahan: boolean
    pemantik_dilepas: boolean
    pemeriksaan?: PemeriksaanCreateNestedManyWithoutKabelListrikInput
  }

  export type KabelListrikUncheckedCreateInput = {
    id?: number
    semua_terisolasi: boolean
    kondisi_konduit: boolean
    perlindungan_kabel: boolean
    alat_listrik_tambahan: boolean
    pemantik_dilepas: boolean
    pemeriksaan?: PemeriksaanUncheckedCreateNestedManyWithoutKabelListrikInput
  }

  export type KabelListrikUpdateInput = {
    semua_terisolasi?: BoolFieldUpdateOperationsInput | boolean
    kondisi_konduit?: BoolFieldUpdateOperationsInput | boolean
    perlindungan_kabel?: BoolFieldUpdateOperationsInput | boolean
    alat_listrik_tambahan?: BoolFieldUpdateOperationsInput | boolean
    pemantik_dilepas?: BoolFieldUpdateOperationsInput | boolean
    pemeriksaan?: PemeriksaanUpdateManyWithoutKabelListrikNestedInput
  }

  export type KabelListrikUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    semua_terisolasi?: BoolFieldUpdateOperationsInput | boolean
    kondisi_konduit?: BoolFieldUpdateOperationsInput | boolean
    perlindungan_kabel?: BoolFieldUpdateOperationsInput | boolean
    alat_listrik_tambahan?: BoolFieldUpdateOperationsInput | boolean
    pemantik_dilepas?: BoolFieldUpdateOperationsInput | boolean
    pemeriksaan?: PemeriksaanUncheckedUpdateManyWithoutKabelListrikNestedInput
  }

  export type KabelListrikCreateManyInput = {
    id?: number
    semua_terisolasi: boolean
    kondisi_konduit: boolean
    perlindungan_kabel: boolean
    alat_listrik_tambahan: boolean
    pemantik_dilepas: boolean
  }

  export type KabelListrikUpdateManyMutationInput = {
    semua_terisolasi?: BoolFieldUpdateOperationsInput | boolean
    kondisi_konduit?: BoolFieldUpdateOperationsInput | boolean
    perlindungan_kabel?: BoolFieldUpdateOperationsInput | boolean
    alat_listrik_tambahan?: BoolFieldUpdateOperationsInput | boolean
    pemantik_dilepas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KabelListrikUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    semua_terisolasi?: BoolFieldUpdateOperationsInput | boolean
    kondisi_konduit?: BoolFieldUpdateOperationsInput | boolean
    perlindungan_kabel?: BoolFieldUpdateOperationsInput | boolean
    alat_listrik_tambahan?: BoolFieldUpdateOperationsInput | boolean
    pemantik_dilepas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BateraiAccuCreateInput = {
    accuBawahtanki: boolean
    Posisiaccu: boolean
    accuIsolator: boolean
    bukanLogam: boolean
    pemeriksaan?: PemeriksaanCreateNestedManyWithoutBateraiAccuInput
  }

  export type BateraiAccuUncheckedCreateInput = {
    id?: number
    accuBawahtanki: boolean
    Posisiaccu: boolean
    accuIsolator: boolean
    bukanLogam: boolean
    pemeriksaan?: PemeriksaanUncheckedCreateNestedManyWithoutBateraiAccuInput
  }

  export type BateraiAccuUpdateInput = {
    accuBawahtanki?: BoolFieldUpdateOperationsInput | boolean
    Posisiaccu?: BoolFieldUpdateOperationsInput | boolean
    accuIsolator?: BoolFieldUpdateOperationsInput | boolean
    bukanLogam?: BoolFieldUpdateOperationsInput | boolean
    pemeriksaan?: PemeriksaanUpdateManyWithoutBateraiAccuNestedInput
  }

  export type BateraiAccuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accuBawahtanki?: BoolFieldUpdateOperationsInput | boolean
    Posisiaccu?: BoolFieldUpdateOperationsInput | boolean
    accuIsolator?: BoolFieldUpdateOperationsInput | boolean
    bukanLogam?: BoolFieldUpdateOperationsInput | boolean
    pemeriksaan?: PemeriksaanUncheckedUpdateManyWithoutBateraiAccuNestedInput
  }

  export type BateraiAccuCreateManyInput = {
    id?: number
    accuBawahtanki: boolean
    Posisiaccu: boolean
    accuIsolator: boolean
    bukanLogam: boolean
  }

  export type BateraiAccuUpdateManyMutationInput = {
    accuBawahtanki?: BoolFieldUpdateOperationsInput | boolean
    Posisiaccu?: BoolFieldUpdateOperationsInput | boolean
    accuIsolator?: BoolFieldUpdateOperationsInput | boolean
    bukanLogam?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BateraiAccuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accuBawahtanki?: BoolFieldUpdateOperationsInput | boolean
    Posisiaccu?: BoolFieldUpdateOperationsInput | boolean
    accuIsolator?: BoolFieldUpdateOperationsInput | boolean
    bukanLogam?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PetugasCreateInput = {
    nomor_petugas: string
    nama_petugas: string
    pemeriksaan?: PemeriksaanCreateNestedManyWithoutPetugasInput
  }

  export type PetugasUncheckedCreateInput = {
    id_petugas?: number
    nomor_petugas: string
    nama_petugas: string
    pemeriksaan?: PemeriksaanUncheckedCreateNestedManyWithoutPetugasInput
  }

  export type PetugasUpdateInput = {
    nomor_petugas?: StringFieldUpdateOperationsInput | string
    nama_petugas?: StringFieldUpdateOperationsInput | string
    pemeriksaan?: PemeriksaanUpdateManyWithoutPetugasNestedInput
  }

  export type PetugasUncheckedUpdateInput = {
    id_petugas?: IntFieldUpdateOperationsInput | number
    nomor_petugas?: StringFieldUpdateOperationsInput | string
    nama_petugas?: StringFieldUpdateOperationsInput | string
    pemeriksaan?: PemeriksaanUncheckedUpdateManyWithoutPetugasNestedInput
  }

  export type PetugasCreateManyInput = {
    id_petugas?: number
    nomor_petugas: string
    nama_petugas: string
  }

  export type PetugasUpdateManyMutationInput = {
    nomor_petugas?: StringFieldUpdateOperationsInput | string
    nama_petugas?: StringFieldUpdateOperationsInput | string
  }

  export type PetugasUncheckedUpdateManyInput = {
    id_petugas?: IntFieldUpdateOperationsInput | number
    nomor_petugas?: StringFieldUpdateOperationsInput | string
    nama_petugas?: StringFieldUpdateOperationsInput | string
  }

  export type SopirCreateInput = {
    nama_sopir: string
    nomer_LO: number
    pemeriksaan?: PemeriksaanCreateNestedManyWithoutSopirInput
  }

  export type SopirUncheckedCreateInput = {
    id_sopir?: number
    nama_sopir: string
    nomer_LO: number
    pemeriksaan?: PemeriksaanUncheckedCreateNestedManyWithoutSopirInput
  }

  export type SopirUpdateInput = {
    nama_sopir?: StringFieldUpdateOperationsInput | string
    nomer_LO?: IntFieldUpdateOperationsInput | number
    pemeriksaan?: PemeriksaanUpdateManyWithoutSopirNestedInput
  }

  export type SopirUncheckedUpdateInput = {
    id_sopir?: IntFieldUpdateOperationsInput | number
    nama_sopir?: StringFieldUpdateOperationsInput | string
    nomer_LO?: IntFieldUpdateOperationsInput | number
    pemeriksaan?: PemeriksaanUncheckedUpdateManyWithoutSopirNestedInput
  }

  export type SopirCreateManyInput = {
    id_sopir?: number
    nama_sopir: string
    nomer_LO: number
  }

  export type SopirUpdateManyMutationInput = {
    nama_sopir?: StringFieldUpdateOperationsInput | string
    nomer_LO?: IntFieldUpdateOperationsInput | number
  }

  export type SopirUncheckedUpdateManyInput = {
    id_sopir?: IntFieldUpdateOperationsInput | number
    nama_sopir?: StringFieldUpdateOperationsInput | string
    nomer_LO?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    username: string
    password: string
    nama_perusahaan: string
    role: RoleCreateNestedOneWithoutUsersInput
    perusahaan?: PerusahaanCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    roleId: number
    perusahaanId?: number | null
    nama_perusahaan: string
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    perusahaan?: PerusahaanUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    perusahaanId?: NullableIntFieldUpdateOperationsInput | number | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password: string
    roleId: number
    perusahaanId?: number | null
    nama_perusahaan: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    perusahaanId?: NullableIntFieldUpdateOperationsInput | number | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
  }

  export type RoleCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    name: string
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PerusahaanCreateInput = {
    tanggal_cek_fisik?: string | null
    nomor_polisi?: string | null
    nama_perusahaan: string
    users?: UserCreateNestedManyWithoutPerusahaanInput
    pemeriksaan?: PemeriksaanCreateNestedManyWithoutPerusahaanInput
  }

  export type PerusahaanUncheckedCreateInput = {
    id_perusahaan?: number
    tanggal_cek_fisik?: string | null
    nomor_polisi?: string | null
    nama_perusahaan: string
    users?: UserUncheckedCreateNestedManyWithoutPerusahaanInput
    pemeriksaan?: PemeriksaanUncheckedCreateNestedManyWithoutPerusahaanInput
  }

  export type PerusahaanUpdateInput = {
    tanggal_cek_fisik?: NullableStringFieldUpdateOperationsInput | string | null
    nomor_polisi?: NullableStringFieldUpdateOperationsInput | string | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutPerusahaanNestedInput
    pemeriksaan?: PemeriksaanUpdateManyWithoutPerusahaanNestedInput
  }

  export type PerusahaanUncheckedUpdateInput = {
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    tanggal_cek_fisik?: NullableStringFieldUpdateOperationsInput | string | null
    nomor_polisi?: NullableStringFieldUpdateOperationsInput | string | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutPerusahaanNestedInput
    pemeriksaan?: PemeriksaanUncheckedUpdateManyWithoutPerusahaanNestedInput
  }

  export type PerusahaanCreateManyInput = {
    id_perusahaan?: number
    tanggal_cek_fisik?: string | null
    nomor_polisi?: string | null
    nama_perusahaan: string
  }

  export type PerusahaanUpdateManyMutationInput = {
    tanggal_cek_fisik?: NullableStringFieldUpdateOperationsInput | string | null
    nomor_polisi?: NullableStringFieldUpdateOperationsInput | string | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
  }

  export type PerusahaanUncheckedUpdateManyInput = {
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    tanggal_cek_fisik?: NullableStringFieldUpdateOperationsInput | string | null
    nomor_polisi?: NullableStringFieldUpdateOperationsInput | string | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PerusahaanRelationFilter = {
    is?: PerusahaanWhereInput
    isNot?: PerusahaanWhereInput
  }

  export type PetugasRelationFilter = {
    is?: PetugasWhereInput
    isNot?: PetugasWhereInput
  }

  export type SopirRelationFilter = {
    is?: SopirWhereInput
    isNot?: SopirWhereInput
  }

  export type KabelListrikNullableRelationFilter = {
    is?: KabelListrikWhereInput | null
    isNot?: KabelListrikWhereInput | null
  }

  export type BateraiAccuNullableRelationFilter = {
    is?: BateraiAccuWhereInput | null
    isNot?: BateraiAccuWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PemeriksaanCountOrderByAggregateInput = {
    id_pemeriksaan?: SortOrder
    id_perusahaan?: SortOrder
    id_petugas?: SortOrder
    id_sopir?: SortOrder
    tanggal_pemeriksaan?: SortOrder
    jenis_pemeriksaan?: SortOrder
    penjelasan?: SortOrder
    keterangan?: SortOrder
    status?: SortOrder
    foto?: SortOrder
    id_kabelListrik?: SortOrder
    id_bateraiAccu?: SortOrder
  }

  export type PemeriksaanAvgOrderByAggregateInput = {
    id_pemeriksaan?: SortOrder
    id_perusahaan?: SortOrder
    id_petugas?: SortOrder
    id_sopir?: SortOrder
    id_kabelListrik?: SortOrder
    id_bateraiAccu?: SortOrder
  }

  export type PemeriksaanMaxOrderByAggregateInput = {
    id_pemeriksaan?: SortOrder
    id_perusahaan?: SortOrder
    id_petugas?: SortOrder
    id_sopir?: SortOrder
    tanggal_pemeriksaan?: SortOrder
    jenis_pemeriksaan?: SortOrder
    penjelasan?: SortOrder
    keterangan?: SortOrder
    status?: SortOrder
    foto?: SortOrder
    id_kabelListrik?: SortOrder
    id_bateraiAccu?: SortOrder
  }

  export type PemeriksaanMinOrderByAggregateInput = {
    id_pemeriksaan?: SortOrder
    id_perusahaan?: SortOrder
    id_petugas?: SortOrder
    id_sopir?: SortOrder
    tanggal_pemeriksaan?: SortOrder
    jenis_pemeriksaan?: SortOrder
    penjelasan?: SortOrder
    keterangan?: SortOrder
    status?: SortOrder
    foto?: SortOrder
    id_kabelListrik?: SortOrder
    id_bateraiAccu?: SortOrder
  }

  export type PemeriksaanSumOrderByAggregateInput = {
    id_pemeriksaan?: SortOrder
    id_perusahaan?: SortOrder
    id_petugas?: SortOrder
    id_sopir?: SortOrder
    id_kabelListrik?: SortOrder
    id_bateraiAccu?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PemeriksaanListRelationFilter = {
    every?: PemeriksaanWhereInput
    some?: PemeriksaanWhereInput
    none?: PemeriksaanWhereInput
  }

  export type PemeriksaanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KabelListrikCountOrderByAggregateInput = {
    id?: SortOrder
    semua_terisolasi?: SortOrder
    kondisi_konduit?: SortOrder
    perlindungan_kabel?: SortOrder
    alat_listrik_tambahan?: SortOrder
    pemantik_dilepas?: SortOrder
  }

  export type KabelListrikAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KabelListrikMaxOrderByAggregateInput = {
    id?: SortOrder
    semua_terisolasi?: SortOrder
    kondisi_konduit?: SortOrder
    perlindungan_kabel?: SortOrder
    alat_listrik_tambahan?: SortOrder
    pemantik_dilepas?: SortOrder
  }

  export type KabelListrikMinOrderByAggregateInput = {
    id?: SortOrder
    semua_terisolasi?: SortOrder
    kondisi_konduit?: SortOrder
    perlindungan_kabel?: SortOrder
    alat_listrik_tambahan?: SortOrder
    pemantik_dilepas?: SortOrder
  }

  export type KabelListrikSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BateraiAccuCountOrderByAggregateInput = {
    id?: SortOrder
    accuBawahtanki?: SortOrder
    Posisiaccu?: SortOrder
    accuIsolator?: SortOrder
    bukanLogam?: SortOrder
  }

  export type BateraiAccuAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BateraiAccuMaxOrderByAggregateInput = {
    id?: SortOrder
    accuBawahtanki?: SortOrder
    Posisiaccu?: SortOrder
    accuIsolator?: SortOrder
    bukanLogam?: SortOrder
  }

  export type BateraiAccuMinOrderByAggregateInput = {
    id?: SortOrder
    accuBawahtanki?: SortOrder
    Posisiaccu?: SortOrder
    accuIsolator?: SortOrder
    bukanLogam?: SortOrder
  }

  export type BateraiAccuSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PetugasCountOrderByAggregateInput = {
    id_petugas?: SortOrder
    nomor_petugas?: SortOrder
    nama_petugas?: SortOrder
  }

  export type PetugasAvgOrderByAggregateInput = {
    id_petugas?: SortOrder
  }

  export type PetugasMaxOrderByAggregateInput = {
    id_petugas?: SortOrder
    nomor_petugas?: SortOrder
    nama_petugas?: SortOrder
  }

  export type PetugasMinOrderByAggregateInput = {
    id_petugas?: SortOrder
    nomor_petugas?: SortOrder
    nama_petugas?: SortOrder
  }

  export type PetugasSumOrderByAggregateInput = {
    id_petugas?: SortOrder
  }

  export type SopirCountOrderByAggregateInput = {
    id_sopir?: SortOrder
    nama_sopir?: SortOrder
    nomer_LO?: SortOrder
  }

  export type SopirAvgOrderByAggregateInput = {
    id_sopir?: SortOrder
    nomer_LO?: SortOrder
  }

  export type SopirMaxOrderByAggregateInput = {
    id_sopir?: SortOrder
    nama_sopir?: SortOrder
    nomer_LO?: SortOrder
  }

  export type SopirMinOrderByAggregateInput = {
    id_sopir?: SortOrder
    nama_sopir?: SortOrder
    nomer_LO?: SortOrder
  }

  export type SopirSumOrderByAggregateInput = {
    id_sopir?: SortOrder
    nomer_LO?: SortOrder
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PerusahaanNullableRelationFilter = {
    is?: PerusahaanWhereInput | null
    isNot?: PerusahaanWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    perusahaanId?: SortOrder
    nama_perusahaan?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    perusahaanId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    perusahaanId?: SortOrder
    nama_perusahaan?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    perusahaanId?: SortOrder
    nama_perusahaan?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    perusahaanId?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PerusahaanCountOrderByAggregateInput = {
    id_perusahaan?: SortOrder
    tanggal_cek_fisik?: SortOrder
    nomor_polisi?: SortOrder
    nama_perusahaan?: SortOrder
  }

  export type PerusahaanAvgOrderByAggregateInput = {
    id_perusahaan?: SortOrder
  }

  export type PerusahaanMaxOrderByAggregateInput = {
    id_perusahaan?: SortOrder
    tanggal_cek_fisik?: SortOrder
    nomor_polisi?: SortOrder
    nama_perusahaan?: SortOrder
  }

  export type PerusahaanMinOrderByAggregateInput = {
    id_perusahaan?: SortOrder
    tanggal_cek_fisik?: SortOrder
    nomor_polisi?: SortOrder
    nama_perusahaan?: SortOrder
  }

  export type PerusahaanSumOrderByAggregateInput = {
    id_perusahaan?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PerusahaanCreateNestedOneWithoutPemeriksaanInput = {
    create?: XOR<PerusahaanCreateWithoutPemeriksaanInput, PerusahaanUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: PerusahaanCreateOrConnectWithoutPemeriksaanInput
    connect?: PerusahaanWhereUniqueInput
  }

  export type PetugasCreateNestedOneWithoutPemeriksaanInput = {
    create?: XOR<PetugasCreateWithoutPemeriksaanInput, PetugasUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: PetugasCreateOrConnectWithoutPemeriksaanInput
    connect?: PetugasWhereUniqueInput
  }

  export type SopirCreateNestedOneWithoutPemeriksaanInput = {
    create?: XOR<SopirCreateWithoutPemeriksaanInput, SopirUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: SopirCreateOrConnectWithoutPemeriksaanInput
    connect?: SopirWhereUniqueInput
  }

  export type KabelListrikCreateNestedOneWithoutPemeriksaanInput = {
    create?: XOR<KabelListrikCreateWithoutPemeriksaanInput, KabelListrikUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: KabelListrikCreateOrConnectWithoutPemeriksaanInput
    connect?: KabelListrikWhereUniqueInput
  }

  export type BateraiAccuCreateNestedOneWithoutPemeriksaanInput = {
    create?: XOR<BateraiAccuCreateWithoutPemeriksaanInput, BateraiAccuUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: BateraiAccuCreateOrConnectWithoutPemeriksaanInput
    connect?: BateraiAccuWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PerusahaanUpdateOneRequiredWithoutPemeriksaanNestedInput = {
    create?: XOR<PerusahaanCreateWithoutPemeriksaanInput, PerusahaanUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: PerusahaanCreateOrConnectWithoutPemeriksaanInput
    upsert?: PerusahaanUpsertWithoutPemeriksaanInput
    connect?: PerusahaanWhereUniqueInput
    update?: XOR<XOR<PerusahaanUpdateToOneWithWhereWithoutPemeriksaanInput, PerusahaanUpdateWithoutPemeriksaanInput>, PerusahaanUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type PetugasUpdateOneRequiredWithoutPemeriksaanNestedInput = {
    create?: XOR<PetugasCreateWithoutPemeriksaanInput, PetugasUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: PetugasCreateOrConnectWithoutPemeriksaanInput
    upsert?: PetugasUpsertWithoutPemeriksaanInput
    connect?: PetugasWhereUniqueInput
    update?: XOR<XOR<PetugasUpdateToOneWithWhereWithoutPemeriksaanInput, PetugasUpdateWithoutPemeriksaanInput>, PetugasUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type SopirUpdateOneRequiredWithoutPemeriksaanNestedInput = {
    create?: XOR<SopirCreateWithoutPemeriksaanInput, SopirUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: SopirCreateOrConnectWithoutPemeriksaanInput
    upsert?: SopirUpsertWithoutPemeriksaanInput
    connect?: SopirWhereUniqueInput
    update?: XOR<XOR<SopirUpdateToOneWithWhereWithoutPemeriksaanInput, SopirUpdateWithoutPemeriksaanInput>, SopirUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type KabelListrikUpdateOneWithoutPemeriksaanNestedInput = {
    create?: XOR<KabelListrikCreateWithoutPemeriksaanInput, KabelListrikUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: KabelListrikCreateOrConnectWithoutPemeriksaanInput
    upsert?: KabelListrikUpsertWithoutPemeriksaanInput
    disconnect?: KabelListrikWhereInput | boolean
    delete?: KabelListrikWhereInput | boolean
    connect?: KabelListrikWhereUniqueInput
    update?: XOR<XOR<KabelListrikUpdateToOneWithWhereWithoutPemeriksaanInput, KabelListrikUpdateWithoutPemeriksaanInput>, KabelListrikUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type BateraiAccuUpdateOneWithoutPemeriksaanNestedInput = {
    create?: XOR<BateraiAccuCreateWithoutPemeriksaanInput, BateraiAccuUncheckedCreateWithoutPemeriksaanInput>
    connectOrCreate?: BateraiAccuCreateOrConnectWithoutPemeriksaanInput
    upsert?: BateraiAccuUpsertWithoutPemeriksaanInput
    disconnect?: BateraiAccuWhereInput | boolean
    delete?: BateraiAccuWhereInput | boolean
    connect?: BateraiAccuWhereUniqueInput
    update?: XOR<XOR<BateraiAccuUpdateToOneWithWhereWithoutPemeriksaanInput, BateraiAccuUpdateWithoutPemeriksaanInput>, BateraiAccuUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PemeriksaanCreateNestedManyWithoutKabelListrikInput = {
    create?: XOR<PemeriksaanCreateWithoutKabelListrikInput, PemeriksaanUncheckedCreateWithoutKabelListrikInput> | PemeriksaanCreateWithoutKabelListrikInput[] | PemeriksaanUncheckedCreateWithoutKabelListrikInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutKabelListrikInput | PemeriksaanCreateOrConnectWithoutKabelListrikInput[]
    createMany?: PemeriksaanCreateManyKabelListrikInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type PemeriksaanUncheckedCreateNestedManyWithoutKabelListrikInput = {
    create?: XOR<PemeriksaanCreateWithoutKabelListrikInput, PemeriksaanUncheckedCreateWithoutKabelListrikInput> | PemeriksaanCreateWithoutKabelListrikInput[] | PemeriksaanUncheckedCreateWithoutKabelListrikInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutKabelListrikInput | PemeriksaanCreateOrConnectWithoutKabelListrikInput[]
    createMany?: PemeriksaanCreateManyKabelListrikInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PemeriksaanUpdateManyWithoutKabelListrikNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutKabelListrikInput, PemeriksaanUncheckedCreateWithoutKabelListrikInput> | PemeriksaanCreateWithoutKabelListrikInput[] | PemeriksaanUncheckedCreateWithoutKabelListrikInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutKabelListrikInput | PemeriksaanCreateOrConnectWithoutKabelListrikInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutKabelListrikInput | PemeriksaanUpsertWithWhereUniqueWithoutKabelListrikInput[]
    createMany?: PemeriksaanCreateManyKabelListrikInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutKabelListrikInput | PemeriksaanUpdateWithWhereUniqueWithoutKabelListrikInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutKabelListrikInput | PemeriksaanUpdateManyWithWhereWithoutKabelListrikInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type PemeriksaanUncheckedUpdateManyWithoutKabelListrikNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutKabelListrikInput, PemeriksaanUncheckedCreateWithoutKabelListrikInput> | PemeriksaanCreateWithoutKabelListrikInput[] | PemeriksaanUncheckedCreateWithoutKabelListrikInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutKabelListrikInput | PemeriksaanCreateOrConnectWithoutKabelListrikInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutKabelListrikInput | PemeriksaanUpsertWithWhereUniqueWithoutKabelListrikInput[]
    createMany?: PemeriksaanCreateManyKabelListrikInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutKabelListrikInput | PemeriksaanUpdateWithWhereUniqueWithoutKabelListrikInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutKabelListrikInput | PemeriksaanUpdateManyWithWhereWithoutKabelListrikInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type PemeriksaanCreateNestedManyWithoutBateraiAccuInput = {
    create?: XOR<PemeriksaanCreateWithoutBateraiAccuInput, PemeriksaanUncheckedCreateWithoutBateraiAccuInput> | PemeriksaanCreateWithoutBateraiAccuInput[] | PemeriksaanUncheckedCreateWithoutBateraiAccuInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutBateraiAccuInput | PemeriksaanCreateOrConnectWithoutBateraiAccuInput[]
    createMany?: PemeriksaanCreateManyBateraiAccuInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type PemeriksaanUncheckedCreateNestedManyWithoutBateraiAccuInput = {
    create?: XOR<PemeriksaanCreateWithoutBateraiAccuInput, PemeriksaanUncheckedCreateWithoutBateraiAccuInput> | PemeriksaanCreateWithoutBateraiAccuInput[] | PemeriksaanUncheckedCreateWithoutBateraiAccuInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutBateraiAccuInput | PemeriksaanCreateOrConnectWithoutBateraiAccuInput[]
    createMany?: PemeriksaanCreateManyBateraiAccuInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type PemeriksaanUpdateManyWithoutBateraiAccuNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutBateraiAccuInput, PemeriksaanUncheckedCreateWithoutBateraiAccuInput> | PemeriksaanCreateWithoutBateraiAccuInput[] | PemeriksaanUncheckedCreateWithoutBateraiAccuInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutBateraiAccuInput | PemeriksaanCreateOrConnectWithoutBateraiAccuInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutBateraiAccuInput | PemeriksaanUpsertWithWhereUniqueWithoutBateraiAccuInput[]
    createMany?: PemeriksaanCreateManyBateraiAccuInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutBateraiAccuInput | PemeriksaanUpdateWithWhereUniqueWithoutBateraiAccuInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutBateraiAccuInput | PemeriksaanUpdateManyWithWhereWithoutBateraiAccuInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type PemeriksaanUncheckedUpdateManyWithoutBateraiAccuNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutBateraiAccuInput, PemeriksaanUncheckedCreateWithoutBateraiAccuInput> | PemeriksaanCreateWithoutBateraiAccuInput[] | PemeriksaanUncheckedCreateWithoutBateraiAccuInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutBateraiAccuInput | PemeriksaanCreateOrConnectWithoutBateraiAccuInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutBateraiAccuInput | PemeriksaanUpsertWithWhereUniqueWithoutBateraiAccuInput[]
    createMany?: PemeriksaanCreateManyBateraiAccuInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutBateraiAccuInput | PemeriksaanUpdateWithWhereUniqueWithoutBateraiAccuInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutBateraiAccuInput | PemeriksaanUpdateManyWithWhereWithoutBateraiAccuInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type PemeriksaanCreateNestedManyWithoutPetugasInput = {
    create?: XOR<PemeriksaanCreateWithoutPetugasInput, PemeriksaanUncheckedCreateWithoutPetugasInput> | PemeriksaanCreateWithoutPetugasInput[] | PemeriksaanUncheckedCreateWithoutPetugasInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutPetugasInput | PemeriksaanCreateOrConnectWithoutPetugasInput[]
    createMany?: PemeriksaanCreateManyPetugasInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type PemeriksaanUncheckedCreateNestedManyWithoutPetugasInput = {
    create?: XOR<PemeriksaanCreateWithoutPetugasInput, PemeriksaanUncheckedCreateWithoutPetugasInput> | PemeriksaanCreateWithoutPetugasInput[] | PemeriksaanUncheckedCreateWithoutPetugasInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutPetugasInput | PemeriksaanCreateOrConnectWithoutPetugasInput[]
    createMany?: PemeriksaanCreateManyPetugasInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type PemeriksaanUpdateManyWithoutPetugasNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutPetugasInput, PemeriksaanUncheckedCreateWithoutPetugasInput> | PemeriksaanCreateWithoutPetugasInput[] | PemeriksaanUncheckedCreateWithoutPetugasInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutPetugasInput | PemeriksaanCreateOrConnectWithoutPetugasInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutPetugasInput | PemeriksaanUpsertWithWhereUniqueWithoutPetugasInput[]
    createMany?: PemeriksaanCreateManyPetugasInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutPetugasInput | PemeriksaanUpdateWithWhereUniqueWithoutPetugasInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutPetugasInput | PemeriksaanUpdateManyWithWhereWithoutPetugasInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type PemeriksaanUncheckedUpdateManyWithoutPetugasNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutPetugasInput, PemeriksaanUncheckedCreateWithoutPetugasInput> | PemeriksaanCreateWithoutPetugasInput[] | PemeriksaanUncheckedCreateWithoutPetugasInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutPetugasInput | PemeriksaanCreateOrConnectWithoutPetugasInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutPetugasInput | PemeriksaanUpsertWithWhereUniqueWithoutPetugasInput[]
    createMany?: PemeriksaanCreateManyPetugasInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutPetugasInput | PemeriksaanUpdateWithWhereUniqueWithoutPetugasInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutPetugasInput | PemeriksaanUpdateManyWithWhereWithoutPetugasInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type PemeriksaanCreateNestedManyWithoutSopirInput = {
    create?: XOR<PemeriksaanCreateWithoutSopirInput, PemeriksaanUncheckedCreateWithoutSopirInput> | PemeriksaanCreateWithoutSopirInput[] | PemeriksaanUncheckedCreateWithoutSopirInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutSopirInput | PemeriksaanCreateOrConnectWithoutSopirInput[]
    createMany?: PemeriksaanCreateManySopirInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type PemeriksaanUncheckedCreateNestedManyWithoutSopirInput = {
    create?: XOR<PemeriksaanCreateWithoutSopirInput, PemeriksaanUncheckedCreateWithoutSopirInput> | PemeriksaanCreateWithoutSopirInput[] | PemeriksaanUncheckedCreateWithoutSopirInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutSopirInput | PemeriksaanCreateOrConnectWithoutSopirInput[]
    createMany?: PemeriksaanCreateManySopirInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type PemeriksaanUpdateManyWithoutSopirNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutSopirInput, PemeriksaanUncheckedCreateWithoutSopirInput> | PemeriksaanCreateWithoutSopirInput[] | PemeriksaanUncheckedCreateWithoutSopirInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutSopirInput | PemeriksaanCreateOrConnectWithoutSopirInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutSopirInput | PemeriksaanUpsertWithWhereUniqueWithoutSopirInput[]
    createMany?: PemeriksaanCreateManySopirInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutSopirInput | PemeriksaanUpdateWithWhereUniqueWithoutSopirInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutSopirInput | PemeriksaanUpdateManyWithWhereWithoutSopirInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type PemeriksaanUncheckedUpdateManyWithoutSopirNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutSopirInput, PemeriksaanUncheckedCreateWithoutSopirInput> | PemeriksaanCreateWithoutSopirInput[] | PemeriksaanUncheckedCreateWithoutSopirInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutSopirInput | PemeriksaanCreateOrConnectWithoutSopirInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutSopirInput | PemeriksaanUpsertWithWhereUniqueWithoutSopirInput[]
    createMany?: PemeriksaanCreateManySopirInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutSopirInput | PemeriksaanUpdateWithWhereUniqueWithoutSopirInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutSopirInput | PemeriksaanUpdateManyWithWhereWithoutSopirInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type PerusahaanCreateNestedOneWithoutUsersInput = {
    create?: XOR<PerusahaanCreateWithoutUsersInput, PerusahaanUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PerusahaanCreateOrConnectWithoutUsersInput
    connect?: PerusahaanWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type PerusahaanUpdateOneWithoutUsersNestedInput = {
    create?: XOR<PerusahaanCreateWithoutUsersInput, PerusahaanUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PerusahaanCreateOrConnectWithoutUsersInput
    upsert?: PerusahaanUpsertWithoutUsersInput
    disconnect?: PerusahaanWhereInput | boolean
    delete?: PerusahaanWhereInput | boolean
    connect?: PerusahaanWhereUniqueInput
    update?: XOR<XOR<PerusahaanUpdateToOneWithWhereWithoutUsersInput, PerusahaanUpdateWithoutUsersInput>, PerusahaanUncheckedUpdateWithoutUsersInput>
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutPerusahaanInput = {
    create?: XOR<UserCreateWithoutPerusahaanInput, UserUncheckedCreateWithoutPerusahaanInput> | UserCreateWithoutPerusahaanInput[] | UserUncheckedCreateWithoutPerusahaanInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPerusahaanInput | UserCreateOrConnectWithoutPerusahaanInput[]
    createMany?: UserCreateManyPerusahaanInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PemeriksaanCreateNestedManyWithoutPerusahaanInput = {
    create?: XOR<PemeriksaanCreateWithoutPerusahaanInput, PemeriksaanUncheckedCreateWithoutPerusahaanInput> | PemeriksaanCreateWithoutPerusahaanInput[] | PemeriksaanUncheckedCreateWithoutPerusahaanInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutPerusahaanInput | PemeriksaanCreateOrConnectWithoutPerusahaanInput[]
    createMany?: PemeriksaanCreateManyPerusahaanInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPerusahaanInput = {
    create?: XOR<UserCreateWithoutPerusahaanInput, UserUncheckedCreateWithoutPerusahaanInput> | UserCreateWithoutPerusahaanInput[] | UserUncheckedCreateWithoutPerusahaanInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPerusahaanInput | UserCreateOrConnectWithoutPerusahaanInput[]
    createMany?: UserCreateManyPerusahaanInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PemeriksaanUncheckedCreateNestedManyWithoutPerusahaanInput = {
    create?: XOR<PemeriksaanCreateWithoutPerusahaanInput, PemeriksaanUncheckedCreateWithoutPerusahaanInput> | PemeriksaanCreateWithoutPerusahaanInput[] | PemeriksaanUncheckedCreateWithoutPerusahaanInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutPerusahaanInput | PemeriksaanCreateOrConnectWithoutPerusahaanInput[]
    createMany?: PemeriksaanCreateManyPerusahaanInputEnvelope
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateManyWithoutPerusahaanNestedInput = {
    create?: XOR<UserCreateWithoutPerusahaanInput, UserUncheckedCreateWithoutPerusahaanInput> | UserCreateWithoutPerusahaanInput[] | UserUncheckedCreateWithoutPerusahaanInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPerusahaanInput | UserCreateOrConnectWithoutPerusahaanInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPerusahaanInput | UserUpsertWithWhereUniqueWithoutPerusahaanInput[]
    createMany?: UserCreateManyPerusahaanInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPerusahaanInput | UserUpdateWithWhereUniqueWithoutPerusahaanInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPerusahaanInput | UserUpdateManyWithWhereWithoutPerusahaanInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PemeriksaanUpdateManyWithoutPerusahaanNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutPerusahaanInput, PemeriksaanUncheckedCreateWithoutPerusahaanInput> | PemeriksaanCreateWithoutPerusahaanInput[] | PemeriksaanUncheckedCreateWithoutPerusahaanInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutPerusahaanInput | PemeriksaanCreateOrConnectWithoutPerusahaanInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutPerusahaanInput | PemeriksaanUpsertWithWhereUniqueWithoutPerusahaanInput[]
    createMany?: PemeriksaanCreateManyPerusahaanInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutPerusahaanInput | PemeriksaanUpdateWithWhereUniqueWithoutPerusahaanInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutPerusahaanInput | PemeriksaanUpdateManyWithWhereWithoutPerusahaanInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPerusahaanNestedInput = {
    create?: XOR<UserCreateWithoutPerusahaanInput, UserUncheckedCreateWithoutPerusahaanInput> | UserCreateWithoutPerusahaanInput[] | UserUncheckedCreateWithoutPerusahaanInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPerusahaanInput | UserCreateOrConnectWithoutPerusahaanInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPerusahaanInput | UserUpsertWithWhereUniqueWithoutPerusahaanInput[]
    createMany?: UserCreateManyPerusahaanInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPerusahaanInput | UserUpdateWithWhereUniqueWithoutPerusahaanInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPerusahaanInput | UserUpdateManyWithWhereWithoutPerusahaanInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PemeriksaanUncheckedUpdateManyWithoutPerusahaanNestedInput = {
    create?: XOR<PemeriksaanCreateWithoutPerusahaanInput, PemeriksaanUncheckedCreateWithoutPerusahaanInput> | PemeriksaanCreateWithoutPerusahaanInput[] | PemeriksaanUncheckedCreateWithoutPerusahaanInput[]
    connectOrCreate?: PemeriksaanCreateOrConnectWithoutPerusahaanInput | PemeriksaanCreateOrConnectWithoutPerusahaanInput[]
    upsert?: PemeriksaanUpsertWithWhereUniqueWithoutPerusahaanInput | PemeriksaanUpsertWithWhereUniqueWithoutPerusahaanInput[]
    createMany?: PemeriksaanCreateManyPerusahaanInputEnvelope
    set?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    disconnect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    delete?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    connect?: PemeriksaanWhereUniqueInput | PemeriksaanWhereUniqueInput[]
    update?: PemeriksaanUpdateWithWhereUniqueWithoutPerusahaanInput | PemeriksaanUpdateWithWhereUniqueWithoutPerusahaanInput[]
    updateMany?: PemeriksaanUpdateManyWithWhereWithoutPerusahaanInput | PemeriksaanUpdateManyWithWhereWithoutPerusahaanInput[]
    deleteMany?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PerusahaanCreateWithoutPemeriksaanInput = {
    tanggal_cek_fisik?: string | null
    nomor_polisi?: string | null
    nama_perusahaan: string
    users?: UserCreateNestedManyWithoutPerusahaanInput
  }

  export type PerusahaanUncheckedCreateWithoutPemeriksaanInput = {
    id_perusahaan?: number
    tanggal_cek_fisik?: string | null
    nomor_polisi?: string | null
    nama_perusahaan: string
    users?: UserUncheckedCreateNestedManyWithoutPerusahaanInput
  }

  export type PerusahaanCreateOrConnectWithoutPemeriksaanInput = {
    where: PerusahaanWhereUniqueInput
    create: XOR<PerusahaanCreateWithoutPemeriksaanInput, PerusahaanUncheckedCreateWithoutPemeriksaanInput>
  }

  export type PetugasCreateWithoutPemeriksaanInput = {
    nomor_petugas: string
    nama_petugas: string
  }

  export type PetugasUncheckedCreateWithoutPemeriksaanInput = {
    id_petugas?: number
    nomor_petugas: string
    nama_petugas: string
  }

  export type PetugasCreateOrConnectWithoutPemeriksaanInput = {
    where: PetugasWhereUniqueInput
    create: XOR<PetugasCreateWithoutPemeriksaanInput, PetugasUncheckedCreateWithoutPemeriksaanInput>
  }

  export type SopirCreateWithoutPemeriksaanInput = {
    nama_sopir: string
    nomer_LO: number
  }

  export type SopirUncheckedCreateWithoutPemeriksaanInput = {
    id_sopir?: number
    nama_sopir: string
    nomer_LO: number
  }

  export type SopirCreateOrConnectWithoutPemeriksaanInput = {
    where: SopirWhereUniqueInput
    create: XOR<SopirCreateWithoutPemeriksaanInput, SopirUncheckedCreateWithoutPemeriksaanInput>
  }

  export type KabelListrikCreateWithoutPemeriksaanInput = {
    semua_terisolasi: boolean
    kondisi_konduit: boolean
    perlindungan_kabel: boolean
    alat_listrik_tambahan: boolean
    pemantik_dilepas: boolean
  }

  export type KabelListrikUncheckedCreateWithoutPemeriksaanInput = {
    id?: number
    semua_terisolasi: boolean
    kondisi_konduit: boolean
    perlindungan_kabel: boolean
    alat_listrik_tambahan: boolean
    pemantik_dilepas: boolean
  }

  export type KabelListrikCreateOrConnectWithoutPemeriksaanInput = {
    where: KabelListrikWhereUniqueInput
    create: XOR<KabelListrikCreateWithoutPemeriksaanInput, KabelListrikUncheckedCreateWithoutPemeriksaanInput>
  }

  export type BateraiAccuCreateWithoutPemeriksaanInput = {
    accuBawahtanki: boolean
    Posisiaccu: boolean
    accuIsolator: boolean
    bukanLogam: boolean
  }

  export type BateraiAccuUncheckedCreateWithoutPemeriksaanInput = {
    id?: number
    accuBawahtanki: boolean
    Posisiaccu: boolean
    accuIsolator: boolean
    bukanLogam: boolean
  }

  export type BateraiAccuCreateOrConnectWithoutPemeriksaanInput = {
    where: BateraiAccuWhereUniqueInput
    create: XOR<BateraiAccuCreateWithoutPemeriksaanInput, BateraiAccuUncheckedCreateWithoutPemeriksaanInput>
  }

  export type PerusahaanUpsertWithoutPemeriksaanInput = {
    update: XOR<PerusahaanUpdateWithoutPemeriksaanInput, PerusahaanUncheckedUpdateWithoutPemeriksaanInput>
    create: XOR<PerusahaanCreateWithoutPemeriksaanInput, PerusahaanUncheckedCreateWithoutPemeriksaanInput>
    where?: PerusahaanWhereInput
  }

  export type PerusahaanUpdateToOneWithWhereWithoutPemeriksaanInput = {
    where?: PerusahaanWhereInput
    data: XOR<PerusahaanUpdateWithoutPemeriksaanInput, PerusahaanUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type PerusahaanUpdateWithoutPemeriksaanInput = {
    tanggal_cek_fisik?: NullableStringFieldUpdateOperationsInput | string | null
    nomor_polisi?: NullableStringFieldUpdateOperationsInput | string | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutPerusahaanNestedInput
  }

  export type PerusahaanUncheckedUpdateWithoutPemeriksaanInput = {
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    tanggal_cek_fisik?: NullableStringFieldUpdateOperationsInput | string | null
    nomor_polisi?: NullableStringFieldUpdateOperationsInput | string | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutPerusahaanNestedInput
  }

  export type PetugasUpsertWithoutPemeriksaanInput = {
    update: XOR<PetugasUpdateWithoutPemeriksaanInput, PetugasUncheckedUpdateWithoutPemeriksaanInput>
    create: XOR<PetugasCreateWithoutPemeriksaanInput, PetugasUncheckedCreateWithoutPemeriksaanInput>
    where?: PetugasWhereInput
  }

  export type PetugasUpdateToOneWithWhereWithoutPemeriksaanInput = {
    where?: PetugasWhereInput
    data: XOR<PetugasUpdateWithoutPemeriksaanInput, PetugasUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type PetugasUpdateWithoutPemeriksaanInput = {
    nomor_petugas?: StringFieldUpdateOperationsInput | string
    nama_petugas?: StringFieldUpdateOperationsInput | string
  }

  export type PetugasUncheckedUpdateWithoutPemeriksaanInput = {
    id_petugas?: IntFieldUpdateOperationsInput | number
    nomor_petugas?: StringFieldUpdateOperationsInput | string
    nama_petugas?: StringFieldUpdateOperationsInput | string
  }

  export type SopirUpsertWithoutPemeriksaanInput = {
    update: XOR<SopirUpdateWithoutPemeriksaanInput, SopirUncheckedUpdateWithoutPemeriksaanInput>
    create: XOR<SopirCreateWithoutPemeriksaanInput, SopirUncheckedCreateWithoutPemeriksaanInput>
    where?: SopirWhereInput
  }

  export type SopirUpdateToOneWithWhereWithoutPemeriksaanInput = {
    where?: SopirWhereInput
    data: XOR<SopirUpdateWithoutPemeriksaanInput, SopirUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type SopirUpdateWithoutPemeriksaanInput = {
    nama_sopir?: StringFieldUpdateOperationsInput | string
    nomer_LO?: IntFieldUpdateOperationsInput | number
  }

  export type SopirUncheckedUpdateWithoutPemeriksaanInput = {
    id_sopir?: IntFieldUpdateOperationsInput | number
    nama_sopir?: StringFieldUpdateOperationsInput | string
    nomer_LO?: IntFieldUpdateOperationsInput | number
  }

  export type KabelListrikUpsertWithoutPemeriksaanInput = {
    update: XOR<KabelListrikUpdateWithoutPemeriksaanInput, KabelListrikUncheckedUpdateWithoutPemeriksaanInput>
    create: XOR<KabelListrikCreateWithoutPemeriksaanInput, KabelListrikUncheckedCreateWithoutPemeriksaanInput>
    where?: KabelListrikWhereInput
  }

  export type KabelListrikUpdateToOneWithWhereWithoutPemeriksaanInput = {
    where?: KabelListrikWhereInput
    data: XOR<KabelListrikUpdateWithoutPemeriksaanInput, KabelListrikUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type KabelListrikUpdateWithoutPemeriksaanInput = {
    semua_terisolasi?: BoolFieldUpdateOperationsInput | boolean
    kondisi_konduit?: BoolFieldUpdateOperationsInput | boolean
    perlindungan_kabel?: BoolFieldUpdateOperationsInput | boolean
    alat_listrik_tambahan?: BoolFieldUpdateOperationsInput | boolean
    pemantik_dilepas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KabelListrikUncheckedUpdateWithoutPemeriksaanInput = {
    id?: IntFieldUpdateOperationsInput | number
    semua_terisolasi?: BoolFieldUpdateOperationsInput | boolean
    kondisi_konduit?: BoolFieldUpdateOperationsInput | boolean
    perlindungan_kabel?: BoolFieldUpdateOperationsInput | boolean
    alat_listrik_tambahan?: BoolFieldUpdateOperationsInput | boolean
    pemantik_dilepas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BateraiAccuUpsertWithoutPemeriksaanInput = {
    update: XOR<BateraiAccuUpdateWithoutPemeriksaanInput, BateraiAccuUncheckedUpdateWithoutPemeriksaanInput>
    create: XOR<BateraiAccuCreateWithoutPemeriksaanInput, BateraiAccuUncheckedCreateWithoutPemeriksaanInput>
    where?: BateraiAccuWhereInput
  }

  export type BateraiAccuUpdateToOneWithWhereWithoutPemeriksaanInput = {
    where?: BateraiAccuWhereInput
    data: XOR<BateraiAccuUpdateWithoutPemeriksaanInput, BateraiAccuUncheckedUpdateWithoutPemeriksaanInput>
  }

  export type BateraiAccuUpdateWithoutPemeriksaanInput = {
    accuBawahtanki?: BoolFieldUpdateOperationsInput | boolean
    Posisiaccu?: BoolFieldUpdateOperationsInput | boolean
    accuIsolator?: BoolFieldUpdateOperationsInput | boolean
    bukanLogam?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BateraiAccuUncheckedUpdateWithoutPemeriksaanInput = {
    id?: IntFieldUpdateOperationsInput | number
    accuBawahtanki?: BoolFieldUpdateOperationsInput | boolean
    Posisiaccu?: BoolFieldUpdateOperationsInput | boolean
    accuIsolator?: BoolFieldUpdateOperationsInput | boolean
    bukanLogam?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PemeriksaanCreateWithoutKabelListrikInput = {
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    perusahaan: PerusahaanCreateNestedOneWithoutPemeriksaanInput
    petugas: PetugasCreateNestedOneWithoutPemeriksaanInput
    sopir: SopirCreateNestedOneWithoutPemeriksaanInput
    bateraiAccu?: BateraiAccuCreateNestedOneWithoutPemeriksaanInput
  }

  export type PemeriksaanUncheckedCreateWithoutKabelListrikInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_bateraiAccu?: number | null
  }

  export type PemeriksaanCreateOrConnectWithoutKabelListrikInput = {
    where: PemeriksaanWhereUniqueInput
    create: XOR<PemeriksaanCreateWithoutKabelListrikInput, PemeriksaanUncheckedCreateWithoutKabelListrikInput>
  }

  export type PemeriksaanCreateManyKabelListrikInputEnvelope = {
    data: PemeriksaanCreateManyKabelListrikInput | PemeriksaanCreateManyKabelListrikInput[]
    skipDuplicates?: boolean
  }

  export type PemeriksaanUpsertWithWhereUniqueWithoutKabelListrikInput = {
    where: PemeriksaanWhereUniqueInput
    update: XOR<PemeriksaanUpdateWithoutKabelListrikInput, PemeriksaanUncheckedUpdateWithoutKabelListrikInput>
    create: XOR<PemeriksaanCreateWithoutKabelListrikInput, PemeriksaanUncheckedCreateWithoutKabelListrikInput>
  }

  export type PemeriksaanUpdateWithWhereUniqueWithoutKabelListrikInput = {
    where: PemeriksaanWhereUniqueInput
    data: XOR<PemeriksaanUpdateWithoutKabelListrikInput, PemeriksaanUncheckedUpdateWithoutKabelListrikInput>
  }

  export type PemeriksaanUpdateManyWithWhereWithoutKabelListrikInput = {
    where: PemeriksaanScalarWhereInput
    data: XOR<PemeriksaanUpdateManyMutationInput, PemeriksaanUncheckedUpdateManyWithoutKabelListrikInput>
  }

  export type PemeriksaanScalarWhereInput = {
    AND?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
    OR?: PemeriksaanScalarWhereInput[]
    NOT?: PemeriksaanScalarWhereInput | PemeriksaanScalarWhereInput[]
    id_pemeriksaan?: IntFilter<"Pemeriksaan"> | number
    id_perusahaan?: IntFilter<"Pemeriksaan"> | number
    id_petugas?: IntFilter<"Pemeriksaan"> | number
    id_sopir?: IntFilter<"Pemeriksaan"> | number
    tanggal_pemeriksaan?: StringFilter<"Pemeriksaan"> | string
    jenis_pemeriksaan?: StringFilter<"Pemeriksaan"> | string
    penjelasan?: StringFilter<"Pemeriksaan"> | string
    keterangan?: StringFilter<"Pemeriksaan"> | string
    status?: StringFilter<"Pemeriksaan"> | string
    foto?: StringFilter<"Pemeriksaan"> | string
    id_kabelListrik?: IntNullableFilter<"Pemeriksaan"> | number | null
    id_bateraiAccu?: IntNullableFilter<"Pemeriksaan"> | number | null
  }

  export type PemeriksaanCreateWithoutBateraiAccuInput = {
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    perusahaan: PerusahaanCreateNestedOneWithoutPemeriksaanInput
    petugas: PetugasCreateNestedOneWithoutPemeriksaanInput
    sopir: SopirCreateNestedOneWithoutPemeriksaanInput
    kabelListrik?: KabelListrikCreateNestedOneWithoutPemeriksaanInput
  }

  export type PemeriksaanUncheckedCreateWithoutBateraiAccuInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
  }

  export type PemeriksaanCreateOrConnectWithoutBateraiAccuInput = {
    where: PemeriksaanWhereUniqueInput
    create: XOR<PemeriksaanCreateWithoutBateraiAccuInput, PemeriksaanUncheckedCreateWithoutBateraiAccuInput>
  }

  export type PemeriksaanCreateManyBateraiAccuInputEnvelope = {
    data: PemeriksaanCreateManyBateraiAccuInput | PemeriksaanCreateManyBateraiAccuInput[]
    skipDuplicates?: boolean
  }

  export type PemeriksaanUpsertWithWhereUniqueWithoutBateraiAccuInput = {
    where: PemeriksaanWhereUniqueInput
    update: XOR<PemeriksaanUpdateWithoutBateraiAccuInput, PemeriksaanUncheckedUpdateWithoutBateraiAccuInput>
    create: XOR<PemeriksaanCreateWithoutBateraiAccuInput, PemeriksaanUncheckedCreateWithoutBateraiAccuInput>
  }

  export type PemeriksaanUpdateWithWhereUniqueWithoutBateraiAccuInput = {
    where: PemeriksaanWhereUniqueInput
    data: XOR<PemeriksaanUpdateWithoutBateraiAccuInput, PemeriksaanUncheckedUpdateWithoutBateraiAccuInput>
  }

  export type PemeriksaanUpdateManyWithWhereWithoutBateraiAccuInput = {
    where: PemeriksaanScalarWhereInput
    data: XOR<PemeriksaanUpdateManyMutationInput, PemeriksaanUncheckedUpdateManyWithoutBateraiAccuInput>
  }

  export type PemeriksaanCreateWithoutPetugasInput = {
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    perusahaan: PerusahaanCreateNestedOneWithoutPemeriksaanInput
    sopir: SopirCreateNestedOneWithoutPemeriksaanInput
    kabelListrik?: KabelListrikCreateNestedOneWithoutPemeriksaanInput
    bateraiAccu?: BateraiAccuCreateNestedOneWithoutPemeriksaanInput
  }

  export type PemeriksaanUncheckedCreateWithoutPetugasInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
    id_bateraiAccu?: number | null
  }

  export type PemeriksaanCreateOrConnectWithoutPetugasInput = {
    where: PemeriksaanWhereUniqueInput
    create: XOR<PemeriksaanCreateWithoutPetugasInput, PemeriksaanUncheckedCreateWithoutPetugasInput>
  }

  export type PemeriksaanCreateManyPetugasInputEnvelope = {
    data: PemeriksaanCreateManyPetugasInput | PemeriksaanCreateManyPetugasInput[]
    skipDuplicates?: boolean
  }

  export type PemeriksaanUpsertWithWhereUniqueWithoutPetugasInput = {
    where: PemeriksaanWhereUniqueInput
    update: XOR<PemeriksaanUpdateWithoutPetugasInput, PemeriksaanUncheckedUpdateWithoutPetugasInput>
    create: XOR<PemeriksaanCreateWithoutPetugasInput, PemeriksaanUncheckedCreateWithoutPetugasInput>
  }

  export type PemeriksaanUpdateWithWhereUniqueWithoutPetugasInput = {
    where: PemeriksaanWhereUniqueInput
    data: XOR<PemeriksaanUpdateWithoutPetugasInput, PemeriksaanUncheckedUpdateWithoutPetugasInput>
  }

  export type PemeriksaanUpdateManyWithWhereWithoutPetugasInput = {
    where: PemeriksaanScalarWhereInput
    data: XOR<PemeriksaanUpdateManyMutationInput, PemeriksaanUncheckedUpdateManyWithoutPetugasInput>
  }

  export type PemeriksaanCreateWithoutSopirInput = {
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    perusahaan: PerusahaanCreateNestedOneWithoutPemeriksaanInput
    petugas: PetugasCreateNestedOneWithoutPemeriksaanInput
    kabelListrik?: KabelListrikCreateNestedOneWithoutPemeriksaanInput
    bateraiAccu?: BateraiAccuCreateNestedOneWithoutPemeriksaanInput
  }

  export type PemeriksaanUncheckedCreateWithoutSopirInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_petugas: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
    id_bateraiAccu?: number | null
  }

  export type PemeriksaanCreateOrConnectWithoutSopirInput = {
    where: PemeriksaanWhereUniqueInput
    create: XOR<PemeriksaanCreateWithoutSopirInput, PemeriksaanUncheckedCreateWithoutSopirInput>
  }

  export type PemeriksaanCreateManySopirInputEnvelope = {
    data: PemeriksaanCreateManySopirInput | PemeriksaanCreateManySopirInput[]
    skipDuplicates?: boolean
  }

  export type PemeriksaanUpsertWithWhereUniqueWithoutSopirInput = {
    where: PemeriksaanWhereUniqueInput
    update: XOR<PemeriksaanUpdateWithoutSopirInput, PemeriksaanUncheckedUpdateWithoutSopirInput>
    create: XOR<PemeriksaanCreateWithoutSopirInput, PemeriksaanUncheckedCreateWithoutSopirInput>
  }

  export type PemeriksaanUpdateWithWhereUniqueWithoutSopirInput = {
    where: PemeriksaanWhereUniqueInput
    data: XOR<PemeriksaanUpdateWithoutSopirInput, PemeriksaanUncheckedUpdateWithoutSopirInput>
  }

  export type PemeriksaanUpdateManyWithWhereWithoutSopirInput = {
    where: PemeriksaanScalarWhereInput
    data: XOR<PemeriksaanUpdateManyMutationInput, PemeriksaanUncheckedUpdateManyWithoutSopirInput>
  }

  export type RoleCreateWithoutUsersInput = {
    name: string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type PerusahaanCreateWithoutUsersInput = {
    tanggal_cek_fisik?: string | null
    nomor_polisi?: string | null
    nama_perusahaan: string
    pemeriksaan?: PemeriksaanCreateNestedManyWithoutPerusahaanInput
  }

  export type PerusahaanUncheckedCreateWithoutUsersInput = {
    id_perusahaan?: number
    tanggal_cek_fisik?: string | null
    nomor_polisi?: string | null
    nama_perusahaan: string
    pemeriksaan?: PemeriksaanUncheckedCreateNestedManyWithoutPerusahaanInput
  }

  export type PerusahaanCreateOrConnectWithoutUsersInput = {
    where: PerusahaanWhereUniqueInput
    create: XOR<PerusahaanCreateWithoutUsersInput, PerusahaanUncheckedCreateWithoutUsersInput>
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PerusahaanUpsertWithoutUsersInput = {
    update: XOR<PerusahaanUpdateWithoutUsersInput, PerusahaanUncheckedUpdateWithoutUsersInput>
    create: XOR<PerusahaanCreateWithoutUsersInput, PerusahaanUncheckedCreateWithoutUsersInput>
    where?: PerusahaanWhereInput
  }

  export type PerusahaanUpdateToOneWithWhereWithoutUsersInput = {
    where?: PerusahaanWhereInput
    data: XOR<PerusahaanUpdateWithoutUsersInput, PerusahaanUncheckedUpdateWithoutUsersInput>
  }

  export type PerusahaanUpdateWithoutUsersInput = {
    tanggal_cek_fisik?: NullableStringFieldUpdateOperationsInput | string | null
    nomor_polisi?: NullableStringFieldUpdateOperationsInput | string | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
    pemeriksaan?: PemeriksaanUpdateManyWithoutPerusahaanNestedInput
  }

  export type PerusahaanUncheckedUpdateWithoutUsersInput = {
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    tanggal_cek_fisik?: NullableStringFieldUpdateOperationsInput | string | null
    nomor_polisi?: NullableStringFieldUpdateOperationsInput | string | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
    pemeriksaan?: PemeriksaanUncheckedUpdateManyWithoutPerusahaanNestedInput
  }

  export type UserCreateWithoutRoleInput = {
    username: string
    password: string
    nama_perusahaan: string
    perusahaan?: PerusahaanCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: number
    username: string
    password: string
    perusahaanId?: number | null
    nama_perusahaan: string
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    roleId?: IntFilter<"User"> | number
    perusahaanId?: IntNullableFilter<"User"> | number | null
    nama_perusahaan?: StringFilter<"User"> | string
  }

  export type UserCreateWithoutPerusahaanInput = {
    username: string
    password: string
    nama_perusahaan: string
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutPerusahaanInput = {
    id?: number
    username: string
    password: string
    roleId: number
    nama_perusahaan: string
  }

  export type UserCreateOrConnectWithoutPerusahaanInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPerusahaanInput, UserUncheckedCreateWithoutPerusahaanInput>
  }

  export type UserCreateManyPerusahaanInputEnvelope = {
    data: UserCreateManyPerusahaanInput | UserCreateManyPerusahaanInput[]
    skipDuplicates?: boolean
  }

  export type PemeriksaanCreateWithoutPerusahaanInput = {
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    petugas: PetugasCreateNestedOneWithoutPemeriksaanInput
    sopir: SopirCreateNestedOneWithoutPemeriksaanInput
    kabelListrik?: KabelListrikCreateNestedOneWithoutPemeriksaanInput
    bateraiAccu?: BateraiAccuCreateNestedOneWithoutPemeriksaanInput
  }

  export type PemeriksaanUncheckedCreateWithoutPerusahaanInput = {
    id_pemeriksaan?: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
    id_bateraiAccu?: number | null
  }

  export type PemeriksaanCreateOrConnectWithoutPerusahaanInput = {
    where: PemeriksaanWhereUniqueInput
    create: XOR<PemeriksaanCreateWithoutPerusahaanInput, PemeriksaanUncheckedCreateWithoutPerusahaanInput>
  }

  export type PemeriksaanCreateManyPerusahaanInputEnvelope = {
    data: PemeriksaanCreateManyPerusahaanInput | PemeriksaanCreateManyPerusahaanInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutPerusahaanInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPerusahaanInput, UserUncheckedUpdateWithoutPerusahaanInput>
    create: XOR<UserCreateWithoutPerusahaanInput, UserUncheckedCreateWithoutPerusahaanInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPerusahaanInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPerusahaanInput, UserUncheckedUpdateWithoutPerusahaanInput>
  }

  export type UserUpdateManyWithWhereWithoutPerusahaanInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPerusahaanInput>
  }

  export type PemeriksaanUpsertWithWhereUniqueWithoutPerusahaanInput = {
    where: PemeriksaanWhereUniqueInput
    update: XOR<PemeriksaanUpdateWithoutPerusahaanInput, PemeriksaanUncheckedUpdateWithoutPerusahaanInput>
    create: XOR<PemeriksaanCreateWithoutPerusahaanInput, PemeriksaanUncheckedCreateWithoutPerusahaanInput>
  }

  export type PemeriksaanUpdateWithWhereUniqueWithoutPerusahaanInput = {
    where: PemeriksaanWhereUniqueInput
    data: XOR<PemeriksaanUpdateWithoutPerusahaanInput, PemeriksaanUncheckedUpdateWithoutPerusahaanInput>
  }

  export type PemeriksaanUpdateManyWithWhereWithoutPerusahaanInput = {
    where: PemeriksaanScalarWhereInput
    data: XOR<PemeriksaanUpdateManyMutationInput, PemeriksaanUncheckedUpdateManyWithoutPerusahaanInput>
  }

  export type PemeriksaanCreateManyKabelListrikInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_bateraiAccu?: number | null
  }

  export type PemeriksaanUpdateWithoutKabelListrikInput = {
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    perusahaan?: PerusahaanUpdateOneRequiredWithoutPemeriksaanNestedInput
    petugas?: PetugasUpdateOneRequiredWithoutPemeriksaanNestedInput
    sopir?: SopirUpdateOneRequiredWithoutPemeriksaanNestedInput
    bateraiAccu?: BateraiAccuUpdateOneWithoutPemeriksaanNestedInput
  }

  export type PemeriksaanUncheckedUpdateWithoutKabelListrikInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PemeriksaanUncheckedUpdateManyWithoutKabelListrikInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PemeriksaanCreateManyBateraiAccuInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
  }

  export type PemeriksaanUpdateWithoutBateraiAccuInput = {
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    perusahaan?: PerusahaanUpdateOneRequiredWithoutPemeriksaanNestedInput
    petugas?: PetugasUpdateOneRequiredWithoutPemeriksaanNestedInput
    sopir?: SopirUpdateOneRequiredWithoutPemeriksaanNestedInput
    kabelListrik?: KabelListrikUpdateOneWithoutPemeriksaanNestedInput
  }

  export type PemeriksaanUncheckedUpdateWithoutBateraiAccuInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PemeriksaanUncheckedUpdateManyWithoutBateraiAccuInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PemeriksaanCreateManyPetugasInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
    id_bateraiAccu?: number | null
  }

  export type PemeriksaanUpdateWithoutPetugasInput = {
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    perusahaan?: PerusahaanUpdateOneRequiredWithoutPemeriksaanNestedInput
    sopir?: SopirUpdateOneRequiredWithoutPemeriksaanNestedInput
    kabelListrik?: KabelListrikUpdateOneWithoutPemeriksaanNestedInput
    bateraiAccu?: BateraiAccuUpdateOneWithoutPemeriksaanNestedInput
  }

  export type PemeriksaanUncheckedUpdateWithoutPetugasInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PemeriksaanUncheckedUpdateManyWithoutPetugasInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PemeriksaanCreateManySopirInput = {
    id_pemeriksaan?: number
    id_perusahaan: number
    id_petugas: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
    id_bateraiAccu?: number | null
  }

  export type PemeriksaanUpdateWithoutSopirInput = {
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    perusahaan?: PerusahaanUpdateOneRequiredWithoutPemeriksaanNestedInput
    petugas?: PetugasUpdateOneRequiredWithoutPemeriksaanNestedInput
    kabelListrik?: KabelListrikUpdateOneWithoutPemeriksaanNestedInput
    bateraiAccu?: BateraiAccuUpdateOneWithoutPemeriksaanNestedInput
  }

  export type PemeriksaanUncheckedUpdateWithoutSopirInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PemeriksaanUncheckedUpdateManyWithoutSopirInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_perusahaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyRoleInput = {
    id?: number
    username: string
    password: string
    perusahaanId?: number | null
    nama_perusahaan: string
  }

  export type UserUpdateWithoutRoleInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
    perusahaan?: PerusahaanUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perusahaanId?: NullableIntFieldUpdateOperationsInput | number | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perusahaanId?: NullableIntFieldUpdateOperationsInput | number | null
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyPerusahaanInput = {
    id?: number
    username: string
    password: string
    roleId: number
    nama_perusahaan: string
  }

  export type PemeriksaanCreateManyPerusahaanInput = {
    id_pemeriksaan?: number
    id_petugas: number
    id_sopir: number
    tanggal_pemeriksaan: string
    jenis_pemeriksaan: string
    penjelasan: string
    keterangan: string
    status: string
    foto: string
    id_kabelListrik?: number | null
    id_bateraiAccu?: number | null
  }

  export type UserUpdateWithoutPerusahaanInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPerusahaanInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyWithoutPerusahaanInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    nama_perusahaan?: StringFieldUpdateOperationsInput | string
  }

  export type PemeriksaanUpdateWithoutPerusahaanInput = {
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    petugas?: PetugasUpdateOneRequiredWithoutPemeriksaanNestedInput
    sopir?: SopirUpdateOneRequiredWithoutPemeriksaanNestedInput
    kabelListrik?: KabelListrikUpdateOneWithoutPemeriksaanNestedInput
    bateraiAccu?: BateraiAccuUpdateOneWithoutPemeriksaanNestedInput
  }

  export type PemeriksaanUncheckedUpdateWithoutPerusahaanInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PemeriksaanUncheckedUpdateManyWithoutPerusahaanInput = {
    id_pemeriksaan?: IntFieldUpdateOperationsInput | number
    id_petugas?: IntFieldUpdateOperationsInput | number
    id_sopir?: IntFieldUpdateOperationsInput | number
    tanggal_pemeriksaan?: StringFieldUpdateOperationsInput | string
    jenis_pemeriksaan?: StringFieldUpdateOperationsInput | string
    penjelasan?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_kabelListrik?: NullableIntFieldUpdateOperationsInput | number | null
    id_bateraiAccu?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use KabelListrikCountOutputTypeDefaultArgs instead
     */
    export type KabelListrikCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KabelListrikCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BateraiAccuCountOutputTypeDefaultArgs instead
     */
    export type BateraiAccuCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BateraiAccuCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PetugasCountOutputTypeDefaultArgs instead
     */
    export type PetugasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PetugasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SopirCountOutputTypeDefaultArgs instead
     */
    export type SopirCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SopirCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PerusahaanCountOutputTypeDefaultArgs instead
     */
    export type PerusahaanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PerusahaanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PemeriksaanDefaultArgs instead
     */
    export type PemeriksaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PemeriksaanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KabelListrikDefaultArgs instead
     */
    export type KabelListrikArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KabelListrikDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BateraiAccuDefaultArgs instead
     */
    export type BateraiAccuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BateraiAccuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PetugasDefaultArgs instead
     */
    export type PetugasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PetugasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SopirDefaultArgs instead
     */
    export type SopirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SopirDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PerusahaanDefaultArgs instead
     */
    export type PerusahaanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PerusahaanDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}